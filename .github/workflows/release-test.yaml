name: Build, Release and Update

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
        default: 'v1.0.0'
      version_code:
        description: 'Version code (e.g., 1, 2, 3)'
        required: true
        type: string
        default: '1'
      build_type:
        description: 'Build type'
        required: true
        type: choice
        options:
          - all
          - basic
          - multi
      
      # 第一个标题部分 - 2个内容项
      custom_title_1:
        description: '第一个自定义标题 (支持Markdown格式)'
        required: false
        type: string
        default: '### 🎉 新功能与改进'
      custom_content_1_1:
        description: '第一个标题下的内容项 1'
        required: false
        type: string
        default: '- 新增系统清理功能'
      custom_content_1_2:
        description: '第一个标题下的内容项 2'
        required: false
        type: string
        default: '- 优化性能监控'
      
      # 第二个标题部分 - 2个内容项
      custom_title_2:
        description: '第二个自定义标题 (支持Markdown格式)'
        required: false
        type: string
        default: '### 🐛 问题修复与优化'
      custom_content_2_1:
        description: '第二个标题下的内容项 1'
        required: false
        type: string
        default: '- 修复内存泄漏问题'
      custom_content_2_2:
        description: '第二个标题下的内容项 2'
        required: false
        type: string
        default: '- 修复崩溃问题'

env:
  GO_VERSION: '1.21'
  NDK_VERSION: 'r26b'

jobs:
  version-setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      version_code: ${{ steps.version.outputs.VERSION_CODE }}
    steps:
    - name: Determine version and version code
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=${{ github.event.inputs.version_code }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=1" >> $GITHUB_OUTPUT
        fi
        echo "Using version: ${{ steps.version.outputs.VERSION }}"
        echo "Using version code: ${{ steps.version.outputs.VERSION_CODE }}"

  prepare-changelog:
    runs-on: ubuntu-latest
    needs: version-setup
    outputs:
      changelog_content: ${{ steps.prepare_changelog.outputs.changelog_content }}
    steps:
    - name: Get current timestamp (Beijing Time)
      id: timestamp
      run: |
        echo "BUILD_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S UTC%z')" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Prepare fully customized changelog content
      id: prepare_changelog
      run: |
        # 创建 changelog.md 文件 - 使用 echo 命令避免 heredoc 语法问题
        {
          echo "# EZ-Clean ${{ needs.version-setup.outputs.version }} 更新日志"
          echo ""
          echo "## 📋 版本概览"
          echo "*版本: ${{ needs.version-setup.outputs.version }}*  "
          echo "*版本代码: ${{ needs.version-setup.outputs.version_code }}*  "
          echo "*构建时间: ${{ steps.timestamp.outputs.BUILD_TIME }}*"
          echo ""
          echo "${{ github.event.inputs.custom_title_1 }}"
          echo "${{ github.event.inputs.custom_content_1_1 }}"
          echo "${{ github.event.inputs.custom_content_1_2 }}"
          echo ""
          echo "${{ github.event.inputs.custom_title_2 }}"
          echo "${{ github.event.inputs.custom_content_2_1 }}"
          echo "${{ github.event.inputs.custom_content_2_2 }}"
          echo ""
          echo "## 📦 安装说明"
          echo "1. **下载模块**: 选择适合您设备架构的模块包"
          echo "2. **刷入模块**: 在 Magisk 或 KernelSU 中安装"
          echo "3. **重启设备**: 使模块生效"
          echo "4. **配置设置**: 根据需求调整模块配置"
          echo ""
          echo "## ⚠️ 注意事项"
          echo "- 💾 **备份数据**: 安装前请备份重要数据"
          echo "- 📱 **兼容性**: 确保模块与您的设备和系统版本兼容"
          echo "- 🔄 **更新建议**: 建议从旧版本升级时先卸载旧版再安装新版"
          echo "- ❓ **问题反馈**: 如遇问题请提交 Issue 并提供详细日志"
          echo ""
          echo "---"
          echo "*构建信息: ${{ steps.timestamp.outputs.BUILD_TIME }} | 版本: ${{ needs.version-setup.outputs.version }} (${{ needs.version-setup.outputs.version_code }})*"
        } > changelog.md
        
        # 读取文件内容到变量
        CHANGELOG_CONTENT=$(cat changelog.md)
        
        # 输出内容到步骤输出
        echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "✅ Fully customized changelog prepared successfully"
        echo "📝 Changelog preview (first 15 lines):"
        head -15 changelog.md

    - name: Upload changelog artifact
      uses: actions/upload-artifact@v4
      with:
        name: changelog-${{ github.run_id }}-${{ github.run_attempt }}
        path: changelog.md
        retention-days: 1

  upload-version-info:
    runs-on: ubuntu-latest
    needs: [version-setup, prepare-changelog]
    steps:
    - name: Save version info
      run: |
        echo "${{ needs.version-setup.outputs.version }}" > version.txt
        echo "${{ needs.version-setup.outputs.version_code }}" > version_code.txt
        echo "${{ needs.prepare-changelog.outputs.changelog_content }}" > changelog_content.txt
      
    - name: Upload version info
      uses: actions/upload-artifact@v4
      with:
        name: version-info-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          version.txt
          version_code.txt
          changelog_content.txt
        retention-days: 1
        if-no-files-found: warn
        compression-level: 6
        overwrite: false

  update-all-json-files:
    runs-on: ubuntu-latest
    needs: [version-setup, prepare-changelog]
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update all JSON files (compact format)
      run: |
        # 更新所有4个JSON文件，保持紧凑格式，使用正确的changelog链接
        echo "Updating all JSON files for version ${{ needs.version-setup.outputs.version }}"
        
        # basic/arm.json - 使用 -c 选项保持紧凑格式
        jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
           --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
           --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-basic-arm.zip" \
           --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
           '.version = $version | .versionCode = ($versionCode | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
           basic/arm.json > temp1.json && mv temp1.json basic/arm.json
        
        # basic/arm64.json
        jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
           --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
           --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-basic-arm64.zip" \
           --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
           '.version = $version | .versionCode = ($versionCode | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
           basic/arm64.json > temp2.json && mv temp2.json basic/arm64.json
        
        # multi/arm.json
        jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
           --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
           --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-multi-arm.zip" \
           --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
           '.version = $version | .versionCode = ($versionCode | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
           multi/arm.json > temp3.json && mv temp3.json multi/arm.json
        
        # multi/arm64.json
        jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
           --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
           --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-multi-arm64.zip" \
           --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
           '.version = $version | .versionCode = ($versionCode | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
           multi/arm64.json > temp4.json && mv temp4.json multi/arm64.json
        
        echo "All JSON files updated successfully (compact format)"
        echo "Changelog URL: https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md"

    - name: Commit and push all JSON files
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # 添加所有更新的JSON文件
        git add basic/arm.json basic/arm64.json multi/arm.json multi/arm64.json
        
        # 检查是否有变更
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ci: update all JSON files for version ${{ needs.version-setup.outputs.version }}"
          git pull --rebase origin main
          git push origin main
          echo "Successfully updated all JSON files"
        fi

  build:
    runs-on: ubuntu-latest
    needs: [version-setup, prepare-changelog]
    strategy:
      matrix:
        include:
          - arch: arm64
            goarch: arm64
            cc: aarch64-linux-android24-clang
            module_type: basic
            source_file: main.go
            module_prop_dir: arm64
          - arch: arm
            goarch: arm
            cc: armv7a-linux-androideabi24-clang
            module_type: basic
            source_file: main.go
            module_prop_dir: arm
          - arch: arm64
            goarch: arm64
            cc: aarch64-linux-android24-clang
            module_type: multi
            source_file: ez.go
            module_prop_dir: arm64
          - arch: arm
            goarch: arm
            cc: armv7a-linux-androideabi24-clang
            module_type: multi
            source_file: ez.go
            module_prop_dir: arm

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=$PWD/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "$PWD/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    - name: Check build condition
      id: check_build
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.build_type }}" == "all" || "${{ github.event.inputs.build_type }}" == "${{ matrix.module_type }}" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi

    - name: Build module
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CC=${{ matrix.cc }}
        export CGO_ENABLED=1
        
        # Build Go binary
        cd source
        go build -ldflags="-s -w" -o ../EZ ${{ matrix.source_file }}
        cd ..
        
        # 创建目录
        mkdir -p build/${{ matrix.module_type }}-${{ matrix.arch }}
        
        # Copy common files
        cp -r META-INF whitelist.conf blacklist.conf MT.conf service.sh customize.sh reload.sh config.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp EZ build/${{ matrix.module_type }}-${{ matrix.arch }}/
        
        # 复制预配置的 module.prop 文件
        cp ${{ matrix.module_type }}/${{ matrix.module_prop_dir }}/module.prop build/${{ matrix.module_type }}-${{ matrix.arch }}/
        
        # 更新预配置的 module.prop 文件中的版本信息
        sed -i "s|^version=.*|version=${{ needs.version-setup.outputs.version }}|" build/${{ matrix.module_type }}-${{ matrix.arch }}/module.prop
        sed -i "s|^versionCode=.*|versionCode=${{ needs.version-setup.outputs.version_code }}|" build/${{ matrix.module_type }}-${{ matrix.arch }}/module.prop
        
        echo "Built ${{ matrix.module_type }} version for ${{ matrix.arch }}"
        echo "Version: ${{ needs.version-setup.outputs.version }}"
        echo "Version Code: ${{ needs.version-setup.outputs.version_code }}"

    - name: Package modules
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        cd build
        for dir in */; do
          if [ -d "$dir" ]; then
            dir_name=$(basename "${dir%/}")
            # 使用正确的zip名称格式
            zip_name="EZ-Clean-${dir_name}.zip"
            echo "Packaging contents of $dir to $zip_name"
            
            cd "$dir_name"
            zip -r "../$zip_name" .
            cd ..
            
            echo "Created: $zip_name"
          fi
        done
        echo "=== All built packages ==="
        ls -la *.zip

    - name: Debug - Verify artifacts
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        echo "=== Verifying build artifacts ==="
        expected_zip="build/EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip"
        if [ -f "$expected_zip" ]; then
          echo "✅ Found: $expected_zip"
          echo "📦 File size: $(du -h "$expected_zip" | cut -f1)"
          echo "🔍 File details:"
          ls -la "$expected_zip"
        else
          echo "❌ Missing: $expected_zip"
          echo "📁 Current build directory contents:"
          ls -la build/
          echo "🔍 All zip files in build directory:"
          find build/ -name "*.zip" -type f
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: steps.check_build.outputs.should_build == 'true'
      with:
        name: EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}
        path: build/EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip
        retention-days: 1
        if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build, update-all-json-files]
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped')
    env:
      TZ: Asia/Shanghai

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: EZ-Clean-*
        merge-multiple: true

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: version-info-${{ github.run_id }}-${{ github.run_attempt }}
        path: version-info

    - name: Download changelog
      uses: actions/download-artifact@v4
      with:
        name: changelog-${{ github.run_id }}-${{ github.run_attempt }}
        path: artifacts

    - name: Read version info
      id: version
      run: |
        VERSION=$(cat version-info/version.txt)
        VERSION_CODE=$(cat version-info/version_code.txt)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
        echo "Using version code: $VERSION_CODE"

    - name: Get current timestamp (Beijing Time)
      id: timestamp
      run: |
        echo "BUILD_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S UTC%z')" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: List downloaded artifacts
      run: |
        echo "=== Downloaded artifacts structure ==="
        find artifacts -type f | sort
        echo "=== Artifacts directory listing ==="
        ls -la artifacts/
        echo "=== Artifact file details ==="
        for file in artifacts/*; do
          if [ -f "$file" ]; then
            echo "📦 $(basename "$file"): $(du -h "$file" | cut -f1)"
          fi
        done

    - name: Verify artifact integrity
      run: |
        echo "=== Verifying artifact integrity ==="
        for file in artifacts/*.zip; do
          if [ -f "$file" ]; then
            echo "🔍 Checking: $(basename "$file")"
            if unzip -t "$file" > /dev/null 2>&1; then
              echo "✅ $(basename "$file"): Valid zip file"
            else
              echo "❌ $(basename "$file"): Corrupted zip file"
              exit 1
            fi
          fi
        done

    - name: Count artifacts
      id: artifact-count
      run: |
        count=$(find artifacts -name "*.zip" -type f | wc -l)
        changelog_count=$(find artifacts -name "changelog.md" -type f | wc -l)
        echo "count=$count" >> $GITHUB_OUTPUT
        echo "changelog_count=$changelog_count" >> $GITHUB_OUTPUT
        echo "Found $count artifact files and $changelog_count changelog files"

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        files: artifacts/*.zip artifacts/changelog.md
        body: ${{ needs.prepare-changelog.outputs.changelog_content }}

    - name: Cleanup old workflows
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 1

    - name: Cleanup old artifacts
      uses: c-hive/gha-remove-artifacts@v1.4.0
      with:
        age: '3 days'