name: EZ-Clean-MultiArch-Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# 并发控制确保工作流稳定性
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: false

env:
  GO_VERSION: 'stable'
  MODULE_NAME: 'EZ-Clean'
  # 定义支持的CPU架构
  ARCH_LIST: 'arm64-v8a armeabi-v7a x86_64 x86'

jobs:
  # 多架构构建矩阵
  build-multi-arch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 包含所有支持的架构
        arch: [arm64-v8a, armeabi-v7a, x86_64, x86]
        variant: [basic, full]
      # 并行构建以提升效率[citation:2]
      fail-fast: false
      max-parallel: 8
    
    name: Build ${{ matrix.variant }} for ${{ matrix.arch }}
    permissions:
      contents: write
      
    steps:
      # 1. 代码检出
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2. 设置Go环境与缓存
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      # 3. 依赖安装
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip file

      # 4. 初始化Go模块（如需要）
      - name: Initialize Go module if needed
        run: |
          if [ ! -f "go.mod" ]; then
            echo "初始化Go模块..."
            go mod init github.com/${{ github.repository }}
          fi
          go mod tidy

      # 5. 动态确定源文件路径
      - name: Locate source files
        id: source_files
        run: |
          if [ -f "源码/main.go" ]; then
            echo "MAIN_GO=源码/main.go" >> $GITHUB_OUTPUT
            echo "EZ_GO=源码/ez.go" >> $GITHUB_OUTPUT
          elif [ -f "main.go" ]; then
            echo "MAIN_GO=main.go" >> $GITHUB_OUTPUT
            echo "EZ_GO=ez.go" >> $GITHUB_OUTPUT
          else
            echo "错误: 未找到Go源文件"
            exit 1
          fi

      # 6. 配置架构特定的Go环境变量[citation:3]
      - name: Setup architecture environment
        id: arch_env
        run: |
          case "${{ matrix.arch }}" in
            arm64-v8a)
              echo "GOARCH=arm64" >> $GITHUB_OUTPUT
              echo "ABI=arm64-v8a" >> $GITHUB_OUTPUT
              ;;
            armeabi-v7a)
              echo "GOARCH=arm" >> $GITHUB_OUTPUT
              echo "ABI=armeabi-v7a" >> $GITHUB_OUTPUT
              ;;
            x86_64)
              echo "GOARCH=amd64" >> $GITHUB_OUTPUT
              echo "ABI=x86_64" >> $GITHUB_OUTPUT
              ;;
            x86)
              echo "GOARCH=386" >> $GITHUB_OUTPUT
              echo "ABI=x86" >> $GITHUB_OUTPUT
              ;;
          esac
          echo "BINARY_NAME=EZ-${{ matrix.variant }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=EZ-Clean-${{ matrix.variant }}-${{ matrix.arch }}.zip" >> $GITHUB_OUTPUT

      # 7. 编译Go程序（针对特定架构）
      - name: Build Go binary for target arch
        run: |
          echo "编译 ${{ matrix.variant }} 版本，架构 ${{ matrix.arch }}"
          
          # 确定要编译的源文件
          if [ "${{ matrix.variant }}" = "basic" ]; then
            SOURCE_FILE="${{ steps.source_files.outputs.MAIN_GO }}"
          else
            SOURCE_FILE="${{ steps.source_files.outputs.EZ_GO }}"
          fi
          
          # 检查源文件是否存在
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "警告: $SOURCE_FILE 不存在，跳过编译"
            exit 0
          fi
          
          # 针对Android目标编译
          GOOS=android GOARCH=${{ steps.arch_env.outputs.GOARCH }} CGO_ENABLED=0 \
            go build -ldflags="-s -w" -o ${{ steps.arch_env.outputs.BINARY_NAME }} "$SOURCE_FILE"
          
          echo "编译完成: $(file ${{ steps.arch_env.outputs.BINARY_NAME }} || true)"

      # 8. 更新module.prop以包含架构信息
      - name: Update module.prop with arch info
        run: |
          cp module.prop module.prop.backup
          # 添加架构信息到模块属性
          echo "architecture=${{ matrix.arch }}" >> module.prop
          echo "versionCode=$(( $(date +%s) + ${{ strategy.job-index }} ))" >> module.prop
          echo "updateJson=https://github.com/${{ github.repository }}/releases/latest/download/update-${{ matrix.arch }}.json" >> module.prop
          
          echo "更新后的module.prop:"
          cat module.prop

      # 9. 准备模块文件
      - name: Prepare module files
        run: |
          mkdir -p module-${{ matrix.variant }}-${{ matrix.arch }}
          
          # 复制通用文件
          cp -r META-INF/ module-${{ matrix.variant }}-${{ matrix.arch }}/ 2>/dev/null || echo "META-INF目录不存在，继续..."
          cp module.prop module-${{ matrix.variant }}-${{ matrix.arch }}/
          cp customize.sh module-${{ matrix.variant }}-${{ matrix.arch }}/ 2>/dev/null || true
          cp service.sh module-${{ matrix.variant }}-${{ matrix.arch }}/ 2>/dev/null || true
          cp *.conf module-${{ matrix.variant }}-${{ matrix.arch }}/ 2>/dev/null || true
          cp reload.sh module-${{ matrix.variant }}-${{ matrix.arch }}/ 2>/dev/null || true
          # 复制对应的二进制文件并重命名
          cp ${{ steps.arch_env.outputs.BINARY_NAME }} module-${{ matrix.variant }}-${{ matrix.arch }}/EZ
          chmod +x module-${{ matrix.variant }}-${{ matrix.arch }}/EZ
          
          echo "模块文件准备完成:"
          ls -la module-${{ matrix.variant }}-${{ matrix.arch }}/

      # 10. 打包模块
      - name: Package module
        run: |
          cd module-${{ matrix.variant }}-${{ matrix.arch }}
          zip -r ../${{ steps.arch_env.outputs.ZIP_NAME }} .
          cd ..
          
          echo "打包完成: ${{ steps.arch_env.outputs.ZIP_NAME }}"
          ls -l *.zip

      # 11. 生成架构特定的update.json
      - name: Generate arch-specific update.json
        run: |
          TIMESTAMP=$(date +%s)
          cat > update-${{ matrix.arch }}.json << EOF
          {
            "version": "v$(date +%Y.%m.%d)",
            "versionCode": $TIMESTAMP,
            "zipUrl": "https://github.com/${{ github.repository }}/releases/latest/download/${{ steps.arch_env.outputs.ZIP_NAME }}",
            "changelog": "https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF_NAME:-latest}",
            "architecture": "${{ matrix.arch }}"
          }
          EOF
          
          echo "生成的update-${{ matrix.arch }}.json:"
          cat update-${{ matrix.arch }}.json

      # 12. 恢复原始module.prop
      - name: Restore original module.prop
        run: |
          mv module.prop.backup module.prop

      # 13. 上传构建产物
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.variant }}-${{ matrix.arch }}
          path: |
            ${{ steps.arch_env.outputs.ZIP_NAME }}
            update-${{ matrix.arch }}.json
          retention-days: 7

  # 创建统一发布
  create-release:
    runs-on: ubuntu-latest
    needs: build-multi-arch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      actions: write
      
    steps:
      # 1. 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*'
          merge-multiple: true

      # 2. 生成统一的发布说明
      - name: Generate unified release notes
        run: |
          cat > RELEASE_NOTES.md << EOF
          # EZ-Clean 多架构版本发布
          
          **构建信息**
          - 发布时间: $(date +'%Y-%m-%d %H:%M:%S')
          - 提交: \`${{ github.sha }}\`
          - 触发方式: ${{ github.event_name }}
          
          ## 支持的CPU架构
          
          Android设备使用多种CPU架构，本发布为每种架构提供了优化版本[citation:3]：
          
          | 架构 | 支持设备 | 推荐选择 |
          |------|----------|----------|
          | **arm64-v8a** | 现代64位ARM设备 (2015年后大部分设备) | ✅ 优先选择 |
          | **armeabi-v7a** | 旧款32位ARM设备 | 老旧设备备用 |
          | **x86_64** | 64位Intel/AMD设备 (模拟器、平板) | 特定设备 |
          | **x86** | 32位Intel设备 | 特定设备 |
          
          ## 版本说明
          
          - **基础版**: 核心清理功能，体积更小
          - **完整版**: 扩展功能集，功能全面
          
          ## 自动更新支持
          
          所有版本均已配置自动更新，安装后可在Magisk/KernelSU中直接检查更新。
          
          ## 文件校验
          $(echo -e "\n")
          $(for file in artifacts/*.zip; do
            if [ -f "$file" ]; then
              echo "  - **$(basename $file)**: \`$(sha256sum $file | awk '{print $1}')\`"
            fi
          done)
          
          ## 使用指南
          
          1. **确定设备架构**: 使用CPU-Z等应用查看设备架构
          2. **选择对应版本**: 下载与设备架构匹配的版本
          3. **刷入模块**: 在Magisk/KernelSU中安装模块
          4. **重启设备**: 启用模块功能
          5. **享受自动更新**: 后续可通过应用内更新直接升级
          
          **注意**: 安装不匹配架构的版本可能导致模块无法正常工作！
          
          EOF
          
          echo "发布说明生成完成"

      # 3. 创建GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "multi-arch-$(date +%Y%m%d-%H%M%S)"
          name: "EZ-Clean 多架构版本 $(date +'%Y.%m.%d')"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            artifacts/*.zip
            artifacts/*.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 工作流清理
  workflow-cleanup:
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && needs.create-release.result != 'skipped'
    
    permissions:
      actions: write
      
    steps:
      - name: Clean old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          retain_runs: 1
          keep_minimum_runs: 0