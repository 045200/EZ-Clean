name: EZ-Clean-MultiArch-Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# 并发控制确保工作流稳定性
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: false

env:
  GO_VERSION: '1.21'
  MODULE_NAME: 'EZ-Clean'

jobs:
  # 多架构构建矩阵
  build-multi-arch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义架构矩阵，映射到Go架构和Android ABI
        include:
          - goarch: arm64
            android_abi: arm64-v8a
            toolchain_triple: aarch64-linux-android21
          - goarch: arm
            android_abi: armeabi-v7a
            toolchain_triple: armv7a-linux-androideabi21
          - goarch: amd64
            android_abi: x86_64
            toolchain_triple: x86_64-linux-android21
          - goarch: 386
            android_abi: x86
            toolchain_triple: i686-linux-android21
        variant: [basic, full]
      # 并行构建以提升效率
      fail-fast: false
      max-parallel: 8
    
    name: Build ${{ matrix.variant }} for ${{ matrix.android_abi }}
    permissions:
      contents: write
      
    steps:
      # 1. 代码检出
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2. 设置Go环境与缓存
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      # 3. 设置Android NDK（用于CGO编译）
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: 'r25b'

      # 4. 依赖安装
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip file

      # 5. 初始化Go模块（如需要）
      - name: Initialize Go module if needed
        run: |
          if [ ! -f "go.mod" ]; then
            echo "初始化Go模块..."
            go mod init github.com/${{ github.repository }}
          fi
          go mod tidy

      # 6. 动态确定源文件路径
      - name: Locate source files
        id: source_files
        run: |
          if [ -f "source/main.go" ]; then
            echo "MAIN_GO=source/main.go" >> $GITHUB_OUTPUT
            echo "EZ_GO=source/ez.go" >> $GITHUB_OUTPUT
          elif [ -f "main.go" ]; then
            echo "MAIN_GO=main.go" >> $GITHUB_OUTPUT
            echo "EZ_GO=ez.go" >> $GITHUB_OUTPUT
          else
            echo "错误: 未找到Go源文件"
            exit 1
          fi

      # 7. 配置构建参数
      - name: Setup build parameters
        id: build_params
        run: |
          echo "BINARY_NAME=EZ-${{ matrix.variant }}-${{ matrix.android_abi }}" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=EZ-Clean-${{ matrix.variant }}-${{ matrix.android_abi }}.zip" >> $GITHUB_OUTPUT
          echo "MODULE_DIR=module-${{ matrix.variant }}-${{ matrix.android_abi }}" >> $GITHUB_OUTPUT

      # 8. 编译Go程序（启用CGO并使用NDK工具链）
      - name: Build Go binary for target arch
        run: |
          echo "编译 ${{ matrix.variant }} 版本，架构 ${{ matrix.android_abi }} (GOARCH=${{ matrix.goarch }})"
          
          # 确定要编译的源文件
          if [ "${{ matrix.variant }}" = "basic" ]; then
            SOURCE_FILE="${{ steps.source_files.outputs.MAIN_GO }}"
          else
            SOURCE_FILE="${{ steps.source_files.outputs.EZ_GO }}"
          fi
          
          # 检查源文件是否存在
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "警告: $SOURCE_FILE 不存在，跳过编译"
            exit 0
          fi
          
          # 设置CGO编译环境
          export GOOS=android
          export GOARCH=${{ matrix.goarch }}
          export CGO_ENABLED=1
          export CC="${{ steps.setup-ndk.outputs.NDK_PATH }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.toolchain_triple }}-clang"
          
          echo "使用编译器: $CC"
          
          # 针对Android目标编译（启用CGO）
          go build -ldflags="-s -w" -o ${{ steps.build_params.outputs.BINARY_NAME }} "$SOURCE_FILE"
          
          # 验证编译结果
          if [ -f "${{ steps.build_params.outputs.BINARY_NAME }}" ]; then
            echo "编译成功!"
            file ${{ steps.build_params.outputs.BINARY_NAME }}
          else
            echo "错误: 编译失败，二进制文件未生成"
            # 尝试备用构建方法（禁用CGO）
            echo "尝试备用构建方法（禁用CGO）..."
            export CGO_ENABLED=0
            go build -tags netgo -ldflags="-s -w -extldflags=-static" -o ${{ steps.build_params.outputs.BINARY_NAME }} "$SOURCE_FILE"
            
            if [ -f "${{ steps.build_params.outputs.BINARY_NAME }}" ]; then
              echo "备用构建方法成功!"
              file ${{ steps.build_params.outputs.BINARY_NAME }}
            else
              echo "备用构建方法也失败"
              exit 1
            fi
          fi

      # 9. 更新module.prop以包含架构信息
      - name: Update module.prop with arch info
        run: |
          if [ -f "module.prop" ]; then
            cp module.prop module.prop.backup
            # 添加架构信息到模块属性
            echo "architecture=${{ matrix.android_abi }}" >> module.prop
            echo "versionCode=$(( $(date +%s) / 100 ))" >> module.prop
            echo "updateJson=https://github.com/${{ github.repository }}/releases/latest/download/update-${{ matrix.android_abi }}.json" >> module.prop
            
            echo "更新后的module.prop:"
            cat module.prop
          else
            echo "警告: module.prop 不存在，创建新的"
            cat > module.prop << EOF
            id=EZ-Clean
            name=EZ Clean
            version=v1.0.0
            versionCode=$(( $(date +%s) / 100 ))
            author=GitHub Actions
            description=Multi-arch EZ Clean module
            architecture=${{ matrix.android_abi }}
            updateJson=https://github.com/${{ github.repository }}/releases/latest/download/update-${{ matrix.android_abi }}.json
            EOF
          fi

      # 10. 准备模块文件（保持二进制文件名为EZ）
      - name: Prepare module files
        run: |
          mkdir -p ${{ steps.build_params.outputs.MODULE_DIR }}
          
          # 复制通用文件
          cp -r META-INF/ ${{ steps.build_params.outputs.MODULE_DIR }}/ 2>/dev/null || echo "META-INF目录不存在，继续..."
          cp module.prop ${{ steps.build_params.outputs.MODULE_DIR }}/
          cp customize.sh ${{ steps.build_params.outputs.MODULE_DIR }}/ 2>/dev/null || true
          cp service.sh ${{ steps.build_params.outputs.MODULE_DIR }}/ 2>/dev/null || true
          cp *.conf ${{ steps.build_params.outputs.MODULE_DIR }}/ 2>/dev/null || true
          cp reload.sh ${{ steps.build_params.outputs.MODULE_DIR }}/ 2>/dev/null || true
          
          # 复制对应的二进制文件并重命名为EZ（保持与现有脚本兼容）
          cp ${{ steps.build_params.outputs.BINARY_NAME }} ${{ steps.build_params.outputs.MODULE_DIR }}/EZ
          chmod +x ${{ steps.build_params.outputs.MODULE_DIR }}/EZ
          
          echo "模块文件准备完成:"
          ls -la ${{ steps.build_params.outputs.MODULE_DIR }}/

      # 11. 打包模块
      - name: Package module
        run: |
          cd ${{ steps.build_params.outputs.MODULE_DIR }}
          zip -r ../${{ steps.build_params.outputs.ZIP_NAME }} .
          cd ..
          
          echo "打包完成: ${{ steps.build_params.outputs.ZIP_NAME }}"
          ls -l *.zip

      # 12. 生成架构特定的update.json
      - name: Generate arch-specific update.json
        run: |
          TIMESTAMP=$(date +%s)
          cat > update-${{ matrix.android_abi }}.json << EOF
          {
            "version": "v$(date +%Y.%m.%d)",
            "versionCode": $(( TIMESTAMP / 100 )),
            "zipUrl": "https://github.com/${{ github.repository }}/releases/latest/download/${{ steps.build_params.outputs.ZIP_NAME }}",
            "changelog": "https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF_NAME:-latest}",
            "architecture": "${{ matrix.android_abi }}"
          }
          EOF
          
          echo "生成的update-${{ matrix.android_abi }}.json:"
          cat update-${{ matrix.android_abi }}.json

      # 13. 恢复原始module.prop
      - name: Restore original module.prop
        run: |
          if [ -f "module.prop.backup" ]; then
            mv module.prop.backup module.prop
            echo "module.prop 已恢复"
          fi

      # 14. 上传构建产物
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.variant }}-${{ matrix.android_abi }}
          path: |
            ${{ steps.build_params.outputs.ZIP_NAME }}
            update-${{ matrix.android_abi }}.json
          retention-days: 7

  # 创建统一发布
  create-release:
    runs-on: ubuntu-latest
    needs: build-multi-arch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      actions: write
      
    steps:
      # 1. 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*'
          merge-multiple: true

      # 2. 生成统一的发布说明
      - name: Generate unified release notes
        run: |
          cat > RELEASE_NOTES.md << EOF
          # EZ-Clean 多架构版本发布
          
          **构建信息**
          - 发布时间: $(date +'%Y-%m-%d %H:%M:%S')
          - 提交: \`${{ github.sha }}\`
          - 触发方式: ${{ github.event_name }}
          
          ## 支持的CPU架构
          
          Android设备使用多种CPU架构，本发布为每种架构提供了优化版本：
          
          | 架构 | 支持设备 | 推荐选择 |
          |------|----------|----------|
          | **arm64-v8a** | 现代64位ARM设备 (2015年后大部分设备) | ✅ 优先选择 |
          | **armeabi-v7a** | 旧款32位ARM设备 | 老旧设备备用 |
          | **x86_64** | 64位Intel/AMD设备 (模拟器、平板) | 特定设备 |
          | **x86** | 32位Intel设备 | 特定设备 |
          
          ## 版本说明
          
          - **基础版**: 核心清理功能，体积更小
          - **完整版**: 扩展功能集，功能全面
          
          ## 自动更新支持
          
          所有版本均已配置自动更新，安装后可在Magisk/KernelSU中直接检查更新。
          
          ## 文件列表
          $(echo -e "\n")
          $(for file in artifacts/*.zip; do
            if [ -f "$file" ]; then
              SIZE=\$(du -h "$file" | cut -f1)
              echo "  - **\$(basename \$file)** (\$SIZE)"
            fi
          done)
          
          ## 使用指南
          
          1. **确定设备架构**: 使用CPU-Z等应用查看设备架构
          2. **选择对应版本**: 下载与设备架构匹配的版本
          3. **刷入模块**: 在Magisk/KernelSU中安装模块
          4. **重启设备**: 启用模块功能
          5. **享受自动更新**: 后续可通过应用内更新直接升级
          
          **注意**: 安装不匹配架构的版本可能导致模块无法正常工作！
          
          EOF
          
          echo "发布说明生成完成"

      # 3. 创建GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "multi-arch-$(date +%Y%m%d-%H%M%S)"
          name: "EZ-Clean 多架构版本 $(date +'%Y.%m.%d')"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            artifacts/*.zip
            artifacts/*.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 工作流清理
  workflow-cleanup:
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && needs.create-release.result != 'skipped'
    
    permissions:
      actions: write
      
    steps:
      - name: Clean old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          retain_runs: 1
          keep_minimum_runs: 0