# 工作流名称：CI打包并发布EZ-Clean版本
name: EZ-Clean-Package-Release

# 触发条件：1.main分支推送/PR 2.v开头Tag推送（如v1.0.0）3.手动触发
on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]  # 仅匹配v开头的Tag（如v1.0.0、v2.1.3）
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # 支持在Actions页面手动触发

jobs:
  # 唯一任务：打包代码并发布（Tag触发时生成Release）
  build-and-publish:
    runs-on: ubuntu-latest  # 使用最新Ubuntu环境
    steps:
      # 步骤1：拉取仓库代码（必须配置fetch-depth:0以获取Tag信息）
      - name: 拉取仓库代码（含Tag历史）
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 关键配置：拉取完整仓库历史，确保能识别Tag

      # 步骤2：打包仓库内容为EZ-Clean.zip（排除冗余目录）
      - name: 打包为EZ-Clean.zip
        run: |
          cd $GITHUB_WORKSPACE  # 进入仓库根目录
          # 压缩所有内容为EZ-Clean.zip，排除.git（版本文件）、.github（工作流配置）、node_modules（依赖，按需保留/删除）
          zip -r EZ-Clean.zip . -x ".git/*" ".github/*" "node_modules/*"

      # 步骤3：仅Tag触发时，创建GitHub Release（非Tag触发时跳过）
      - name: 创建GitHub Release（仅Tag推送时执行）
        if: startsWith(github.ref, 'refs/tags/')  # 条件：仅当触发源是Tag时执行
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 仓库默认Token，无需额外配置
        id: create_release  # 定义ID，供后续上传步骤引用
        with:
          tag_name: ${{ github.ref_name }}  # Release标签 = 推送的Git Tag（如v1.0.0）
          release_name: EZ-Clean-${{ github.ref_name }}  # Release名称（如EZ-Clean-v1.0.0）
          draft: false  # 直接发布，不存为草稿
          prerelease: false  # 标记为正式版本（需预发布则改为true）

      # 步骤4：仅Tag触发时，将EZ-Clean.zip上传到Release资产
      - name: 上传EZ-Clean.zip到Release（仅Tag推送时执行）
        if: startsWith(github.ref, 'refs/tags/')  # 与步骤3共享条件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # 关联步骤3创建的Release
          asset_path: ${{ github.workspace }}/EZ-Clean.zip  # 本地打包好的ZIP路径
          asset_name: EZ-Clean.zip  # 显示在Release上的文件名
          asset_content_type: application/zip  # 文件类型（固定为zip格式）
