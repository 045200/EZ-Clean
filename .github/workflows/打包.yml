name: EZ-Clean-Auto-Manual-Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # 1. 核心：编译+发布流程（含Release修复）
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      actions: write        # 用于清理工作流记录
      contents: write       # 用于发布Release、操作标签
      pull-requests: write
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 配置Git全局身份
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          echo "Git身份配置完成"

      - name: 安装Go环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: 创建产物存放文件夹
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p 普通版 多功能版
          echo "产物文件夹创建完成"

      - name: 编译Go文件（产物名均为EZ）
        run: |
          cd $GITHUB_WORKSPACE/源码
          go build -o ../普通版/EZ main.go
          go build -o ../多功能版/EZ ez.go
          echo "编译完成：普通版/EZ、多功能版/EZ"

      - name: 创建/覆盖module标签
        run: |
          FIXED_TAG="module"
          TRIGGER_TYPE=$([ "${{ github.event_name }}" == "push" ] && echo "自动触发" || echo "手动触发")
          git tag -d $FIXED_TAG 2>/dev/null || true
          git push origin --delete $FIXED_TAG 2>/dev/null || true
          git tag -a $FIXED_TAG -m "EZ-Clean-$TRIGGER_TYPE（时间：$(date +'%Y-%m-%d %H:%M:%S')）"
          git push origin $FIXED_TAG --force
          echo "标签 $FIXED_TAG 已更新"

      - name: 打包双版本压缩包（排除产物文件夹）
        run: |
          cd $GITHUB_WORKSPACE
          # 普通版打包
          cp 普通版/EZ ./EZ
          zip -r EZ-Clean-普通版.zip . -x ".git/*" ".github/*" "node_modules/*" "源码/*" "普通版/*" "多功能版/*"
          rm ./EZ
          # 多功能版打包
          cp 多功能版/EZ ./EZ
          zip -r EZ-Clean-多功能版.zip . -x ".git/*" ".github/*" "node_modules/*" "源码/*" "普通版/*" "多功能版/*"
          rm ./EZ
          echo "双压缩包打包完成"

      - name: 打包后删除产物文件夹
        run: |
          cd $GITHUB_WORKSPACE
          rm -rf 普通版 多功能版
          echo "产物文件夹已删除"

      - name: 生成Release说明文档
        run: |
          echo "## EZ-Clean 发布说明
          - **发布类型**：${{ github.event_name == 'push' && 'main分支自动发布' || '手动触发发布' }}
          - **发布时间**：$(date +'%Y-%m-%d %H:%M:%S')
          - **标签版本**：module（固定标签，每次发布覆盖更新）
          
          ### 压缩包说明
          1. **EZ-Clean-普通版.zip**：包含核心功能二进制文件 `EZ`
          2. **EZ-Clean-多功能版.zip**：包含扩展功能二进制文件 `EZ`
          
          ### 注意事项
          - 压缩包已排除源码、Git相关文件及临时产物文件夹，可直接提取使用
          - 若需查看源码，请从仓库主分支获取" > RELEASE_NOTES.md
          echo "Release说明文档生成完成"

      - name: 删除旧Release（解决资产覆盖冲突）
        run: |
          FIXED_TAG="module"
          # 查旧Release ID
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$FIXED_TAG" | jq -r .id)
          # 删旧Release
          if [ "$RELEASE_ID" != "null" ]; then
            curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
            echo "旧Release（ID: $RELEASE_ID）已删除"
          else
            echo "无旧Release需删除"
          fi

      - name: 发布Release（固定名称+资产覆盖）
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "module"
          name: "EZ-Clean-双版本发布"  # 固定名称，无动态时间
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          overwrite_files: true
          files: |
            ${{ github.workspace }}/EZ-Clean-普通版.zip
            ${{ github.workspace }}/EZ-Clean-多功能版.zip

  # 2. 恢复：工作流记录保留/清理流程（按你的需求配置）
  workflow-cleanup:
    runs-on: ubuntu-latest
    needs: build-and-release  # 确保发布完成后再清理
    permissions:
      actions: write  # 必须权限：删除工作流记录
    steps:
      - name: 清理旧工作流记录（保留运行中/成功/失败，0天保留）
        uses: matt-rakes/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0  # 核心：超过0天的记录全部删除（即仅保留当天记录）
          # 仅删除“已完成”状态的工作流（保留“运行中”状态）
          delete_workflow_by_state_pattern: 'completed'
          # 仅保留“成功/失败”结论的记录（删除“取消”等其他结论）
          delete_run_by_conclusion_pattern: 'success,failure'
          dry_run: false  # 关闭预览，实际执行删除
