name: EZ-Clean-Auto-Manual-Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    steps:
      # 1. 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq zip
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update && sudo apt-get install -y gh
          go version
          gh --version

      # 3. 编译Go程序
      - name: Build Go binaries
        run: |
          echo "Building binaries..."
          # 编译基础版 (main.go)
          go build -o EZ-basic 源码/main.go
          # 编译完整版 (ez.go)  
          go build -o EZ-full 源码/ez.go
          # 验证编译结果
          echo "Build results:"
          ls -l EZ-basic EZ-full
          file EZ-basic EZ-full

      # 4. 准备模块文件
      - name: Prepare module files
        run: |
          echo "Preparing module directories..."
          
          # 创建基础版模块目录
          mkdir -p module-basic
          # 复制模块必需文件到基础版目录
          cp -r META-INF/ module-basic/ 2>/dev/null || true
          cp module.prop module-basic/ 2>/dev/null || true
          cp customize.sh module-basic/ 2>/dev/null || true
          cp service.sh module-basic/ 2>/dev/null || true
          cp reload.sh module-basic/ 2>/dev/null || true
          cp blacklist.conf module-basic/ 2>/dev/null || true
          cp whitelist.conf module-basic/ 2>/dev/null || true
          cp MTW.conf module-basic/ 2>/dev/null || true
          cp config.conf module-basic/ 2>/dev/null || true
          # 复制基础版二进制程序
          cp EZ-basic module-basic/EZ
          
          # 创建完整版模块目录
          mkdir -p module-full
          # 复制模块必需文件到完整版目录
          cp -r META-INF/ module-full/ 2>/dev/null || true
          cp module.prop module-full/ 2>/dev/null || true
          cp customize.sh module-full/ 2>/dev/null || true
          cp service.sh module-full/ 2>/dev/null || true
          cp reload.sh module-full/ 2>/dev/null || true
          cp blacklist.conf module-full/ 2>/dev/null || true
          cp whitelist.conf module-full/ 2>/dev/null || true
          cp MTW.conf module-full/ 2>/dev/null || true
          cp config.conf module-full/ 2>/dev/null || true
          # 复制完整版二进制程序
          cp EZ-full module-full/EZ
          
          echo "Module directories prepared:"
          ls -la module-basic/ module-full/

      # 5. 打包模块
      - name: Package modules
        run: |
          echo "Creating module zip packages..."
          
          # 打包基础版模块
          cd module-basic
          zip -r ../EZ-Clean-Basic.zip .
          cd ..
          
          # 打包完整版模块
          cd module-full
          zip -r ../EZ-Clean-Full.zip .
          cd ..
          
          echo "Package results:"
          ls -l *.zip

      # 6. 清理编译产物和临时目录
      - name: Clean build artifacts
        run: |
          echo "Cleaning build artifacts..."
          rm -f EZ-basic EZ-full
          rm -rf module-basic module-full
          echo "Remaining files:"
          ls -la *.zip

      # 7. 生成发布说明
      - name: Generate Release notes
        run: |
          echo "## EZ-Clean Release Notes
- **Trigger Type**: ${{ github.event_name == 'push' && 'Main Branch Auto' || 'Manual' }}
- **Release Time**: $(date +'%Y-%m-%d %H:%M:%S')
- **Tag**: module (Overwritten on each release)
- **Module Versions**:
  - Basic Version: Compiled from main.go (Core functionality)
  - Full Version: Compiled from ez.go (Extended features)
- **Compatibility**: Compatible with both Magisk and KernelSU
- **SHA256 Checksums**:
  - EZ-Clean-Basic.zip: $(sha256sum EZ-Clean-Basic.zip | awk '{print $1}')
  - EZ-Clean-Full.zip: $(sha256sum EZ-Clean-Full.zip | awk '{print $1}')" > RELEASE_NOTES.md
          
          echo "Release notes:"
          cat RELEASE_NOTES.md

      # 8. 验证发布文件
      - name: Verify release files
        run: |
          echo "Checking required files:"
          [ -f "EZ-Clean-Basic.zip" ] && echo "✓ EZ-Clean-Basic.zip exists" || (echo "✗ EZ-Clean-Basic.zip missing" && exit 1)
          [ -f "EZ-Clean-Full.zip" ] && echo "✓ EZ-Clean-Full.zip exists" || (echo "✗ EZ-Clean-Full.zip missing" && exit 1)
          [ -f "RELEASE_NOTES.md" ] && echo "✓ RELEASE_NOTES.md exists" || (echo "✗ RELEASE_NOTES.md missing" && exit 1)
          echo "All files verified successfully"

      # 9. 删除旧发布
      - name: Delete old releases
        uses: sgpublic/delete-release-action@v1.1
        with:
          repo: ${{ github.repository }}
          release_drop: true
          release_drop_count: 3
          release_drop_tag: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # 10. 重建标签
      - name: Recreate module tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          FIXED_TAG="module"
          git tag -d $FIXED_TAG 2>/dev/null || true
          git push origin --delete $FIXED_TAG 2>/dev/null || true
          git tag -a $FIXED_TAG -m "EZ-Clean Release $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin $FIXED_TAG --force
          echo "Tag $FIXED_TAG recreated"

      # 11. 创建发布
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "module"
          name: "EZ-Clean Dual Versions"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            EZ-Clean-Basic.zip
            EZ-Clean-Full.zip

  workflow-cleanup:
    runs-on: ubuntu-latest
    needs: build-and-release
    permissions:
      actions: write
    steps:
      - name: Clean old workflow runs
        uses: matt-rakes/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          retain_runs: 1
          delete_workflow_by_state_pattern: 'completed'
          delete_run_by_conclusion_pattern: 'success,failure'
          dry_run: false