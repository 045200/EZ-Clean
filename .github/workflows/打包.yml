name: EZ-Clean-Auto-Manual-Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# 添加并发控制以防止重复运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    steps:
      # 1. 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip
          # 安装 Go
          if ! command -v go &> /dev/null; then
            echo "Installing Go..."
            # 这里可以根据需要安装特定版本的Go
          else
            echo "Go is already installed"
          fi
          go version

      # 3. 编译Go程序 - 修复了路径问题
      - name: Build Go binaries
        run: |
          echo "Building binaries..."
          # 创建必要的目录（如果不存在）
          mkdir -p 源码
          
          # 检查源文件是否存在
          if [ ! -f "源码/main.go" ]; then
            echo "错误: 源码/main.go 不存在"
            echo "当前目录内容:"
            ls -la
            echo "源码目录内容:"
            ls -la 源码/ || echo "源码目录不存在"
            exit 1
          fi
          
          # 编译基础版 (main.go)
          echo "编译基础版..."
          go build -o EZ-basic 源码/main.go
          # 编译完整版 (ez.go)
          echo "编译完整版..."
          go build -o EZ-full 源码/ez.go
          
          # 验证编译结果
          echo "编译结果:"
          ls -l EZ-basic EZ-full
          file EZ-basic EZ-full || true

      # 4. 准备模块文件
      - name: Prepare module files
        run: |
          echo "准备模块目录..."
          
          # 检查必要的模块文件
          REQUIRED_FILES=("module.prop" "customize.sh" "service.sh")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "警告: $file 不存在"
            else
              echo "找到: $file"
            fi
          done
          
          # 创建基础版模块目录
          mkdir -p module-basic
          # 复制模块必需文件到基础版目录
          cp -r META-INF/ module-basic/ 2>/dev/null || echo "META-INF目录不存在，继续..."
          cp module.prop module-basic/ 2>/dev/null || true
          cp customize.sh module-basic/ 2>/dev/null || true
          cp service.sh module-basic/ 2>/dev/null || true
          cp reload.sh module-basic/ 2>/dev/null || true
          cp blacklist.conf module-basic/ 2>/dev/null || true
          cp whitelist.conf module-basic/ 2>/dev/null || true
          cp MT.conf module-basic/ 2>/dev/null || true
          cp config.conf module-basic/ 2>/dev/null || true
          # 复制基础版二进制程序
          cp EZ-basic module-basic/EZ
          chmod +x module-basic/EZ
          
          # 创建完整版模块目录
          mkdir -p module-full
          # 复制模块必需文件到完整版目录
          cp -r META-INF/ module-full/ 2>/dev/null || echo "META-INF目录不存在，继续..."
          cp module.prop module-full/ 2>/dev/null || true
          cp customize.sh module-full/ 2>/dev/null || true
          cp service.sh module-full/ 2>/dev/null || true
          cp reload.sh module-full/ 2>/dev/null || true
          cp blacklist.conf module-full/ 2>/dev/null || true
          cp whitelist.conf module-full/ 2>/dev/null || true
          cp MT.conf module-full/ 2>/dev/null || true
          cp config.conf module-full/ 2>/dev/null || true
          # 复制完整版二进制程序
          cp EZ-full module-full/EZ
          chmod +x module-full/EZ
          
          echo "模块目录准备完成:"
          ls -la module-basic/ module-full/

      # 5. 打包模块
      - name: Package modules
        run: |
          echo "创建模块zip包..."
          
          # 打包基础版模块
          cd module-basic
          zip -r ../EZ-Clean-Basic.zip .
          cd ..
          
          # 打包完整版模块
          cd module-full
          zip -r ../EZ-Clean-Full.zip .
          cd ..
          
          echo "打包结果:"
          ls -l *.zip

      # 6. 清理编译产物和临时目录
      - name: Clean build artifacts
        run: |
          echo "清理编译产物..."
          rm -f EZ-basic EZ-full
          rm -rf module-basic module-full
          echo "剩余文件:"
          ls -la *.zip

      # 7. 生成发布说明
      - name: Generate Release notes
        run: |
          echo "## EZ-Clean 发布说明
- **触发类型**: ${{ github.event_name == 'push' && '主分支自动触发' || '手动触发' }}
- **发布时间**: $(date +'%Y-%m-%d %H:%M:%S')
- **标签**: module (每次发布覆盖)
- **模块版本**:
  - 基础版: 从 main.go 编译 (核心功能)
  - 完整版: 从 ez.go 编译 (扩展功能)
- **兼容性**: 兼容 Magisk 和 KernelSU
- **SHA256 校验和**:
  - EZ-Clean-Basic.zip: $(sha256sum EZ-Clean-Basic.zip | awk '{print $1}')
  - EZ-Clean-Full.zip: $(sha256sum EZ-Clean-Full.zip | awk '{print $1}')" > RELEASE_NOTES.md
          
          echo "发布说明:"
          cat RELEASE_NOTES.md

      # 8. 验证发布文件
      - name: Verify release files
        run: |
          echo "检查必要文件:"
          [ -f "EZ-Clean-Basic.zip" ] && echo "✓ EZ-Clean-Basic.zip 存在" || (echo "✗ EZ-Clean-Basic.zip 缺失" && exit 1)
          [ -f "EZ-Clean-Full.zip" ] && echo "✓ EZ-Clean-Full.zip 存在" || (echo "✗ EZ-Clean-Full.zip 缺失" && exit 1)
          [ -f "RELEASE_NOTES.md" ] && echo "✓ RELEASE_NOTES.md 存在" || (echo "✗ RELEASE_NOTES.md 缺失" && exit 1)
          echo "所有文件验证成功"

      # 9. 删除旧发布 - 使用PAT替代GITHUB_TOKEN
      - name: Delete old releases
        uses: sgpublic/delete-release-action@v1.1
        with:
          repo: ${{ github.repository }}
          release_drop: true
          release_drop_count: 3
          release_drop_tag: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # 10. 重建标签 - 添加错误处理
      - name: Recreate module tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          FIXED_TAG="module"
          
          # 删除本地和远程标签
          git tag -d $FIXED_TAG 2>/dev/null || echo "本地标签不存在"
          git push origin --delete $FIXED_TAG 2>/dev/null || echo "远程标签不存在或无法删除"
          
          # 创建新标签
          git tag -a $FIXED_TAG -m "EZ-Clean Release $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin $FIXED_TAG
          echo "标签 $FIXED_TAG 重建完成"

      # 11. 创建发布
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "module"
          name: "EZ-Clean 双版本"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            EZ-Clean-Basic.zip
            EZ-Clean-Full.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 优化工作流清理配置
  workflow-cleanup:
    runs-on: ubuntu-latest
    needs: build-and-release
    permissions:
      actions: write
    # 仅在build-and-release成功时运行
    if: needs.build-and-release.result == 'success'
    steps:
      - name: Clean old workflow runs
        uses: matt-rakes/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          retain_runs: 1
          delete_workflow_by_state_pattern: 'completed'
          delete_run_by_conclusion_pattern: 'success'
          dry_run: false