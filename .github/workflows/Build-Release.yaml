name: Build Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
        default: 'v1.0.0'
      version_code:
        description: 'Version code (e.g., 1, 2, 3)'
        required: true
        type: string
        default: '1'
      build_type:
        description: 'Build type'
        required: true
        type: choice
        options:
          - all
          - basic
          - multi

      # 自定义更新内容部分
      custom_title_1:
        description: '第一个自定义标题 (支持Markdown格式，留空则跳过此部分)'
        required: false
        type: string
        default: ''
      custom_content_1_1:
        description: '第一个标题下的内容项 1 (留空则跳过)'
        required: false
        type: string
        default: ''
      custom_content_1_2:
        description: '第一个标题下的内容项 2 (留空则跳过)'
        required: false
        type: string
        default: ''

      custom_title_2:
        description: '第二个自定义标题 (支持Markdown格式，留空则跳过此部分)'
        required: false
        type: string
        default: ''
      custom_content_2_1:
        description: '第二个标题下的内容项 1 (留空则跳过)'
        required: false
        type: string
        default: ''
      custom_content_2_2:
        description: '第二个标题下的内容项 2 (留空则跳过)'
        required: false
        type: string
        default: ''

env:
  GO_VERSION: '1.22'
  ANDROID_NDK_VERSION: 'r28b'
  ANDROID_API_LEVEL: '28'

jobs:
  version-setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      version_code: ${{ steps.version.outputs.VERSION_CODE }}
    steps:
    - name: Determine version and version code
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=${{ github.event.inputs.version_code }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=1" >> $GITHUB_OUTPUT
        fi
        echo "Using version: ${{ steps.version.outputs.VERSION }}"
        echo "Using version code: ${{ steps.version.outputs.VERSION_CODE }}"

  setup-android-ndk:
    runs-on: ubuntu-latest
    outputs:
      ndk-home: ${{ steps.setup-ndk.outputs.ndk-home }}
    steps:
    - name: Setup Android NDK R28
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}

    - name: Verify NDK installation
      run: |
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "NDK toolchain contents:"
        ls $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/*-clang | head -10
        echo "✅ NDK R28 setup completed"

  prepare-changelog:
    runs-on: ubuntu-latest
    needs: [version-setup, setup-android-ndk]
    outputs:
      changelog_content: ${{ steps.prepare_changelog.outputs.changelog_content }}
    steps:
    - name: Get current timestamp (Beijing Time)
      id: timestamp
      run: |
        echo "BUILD_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Prepare fully customized changelog content
      id: prepare_changelog
      run: |
        # 创建 changelog.md 文件 - 使用动态内容生成
        {
          echo "# EZ-Clean ${{ needs.version-setup.outputs.version }} 更新日志"
          echo ""
          echo "## 📋 版本概览"
          echo "*版本: ${{ needs.version-setup.outputs.version }}*  "
          echo "*版本代码: ${{ needs.version-setup.outputs.version_code }}*  "
          echo "*构建时间: ${{ steps.timestamp.outputs.BUILD_TIME }}*"
          echo "*最低支持: Android 9.0 (API 28)*"
          echo "*构建工具: NDK R28 + Go ${{ env.GO_VERSION }}*"
          echo ""
          
          # 第一个标题部分
          if [ -n "${{ github.event.inputs.custom_title_1 }}" ]; then
            echo "${{ github.event.inputs.custom_title_1 }}"
            
            if [ -n "${{ github.event.inputs.custom_content_1_1 }}" ]; then
              echo "${{ github.event.inputs.custom_content_1_1 }}"
            fi
            
            if [ -n "${{ github.event.inputs.custom_content_1_2 }}" ]; then
              echo "${{ github.event.inputs.custom_content_1_2 }}"
            fi
            
            echo ""
          fi
          
          # 第二个标题部分
          if [ -n "${{ github.event.inputs.custom_title_2 }}" ]; then
            echo "${{ github.event.inputs.custom_title_2 }}"
            
            if [ -n "${{ github.event.inputs.custom_content_2_1 }}" ]; then
              echo "${{ github.event.inputs.custom_content_2_1 }}"
            fi
            
            if [ -n "${{ github.event.inputs.custom_content_2_2 }}" ]; then
              echo "${{ github.event.inputs.custom_content_2_2 }}"
            fi
            
            echo ""
          fi
          
          # 如果没有自定义内容
          if [ -z "${{ github.event.inputs.custom_title_1 }}" ] && [ -z "${{ github.event.inputs.custom_title_2 }}" ]; then
            echo "## 🔧 技术更新"
            echo "- ✅ 提升最低支持到 Android 9.0 (API 28)"
            echo "- ✅ 使用 NDK R28 工具链构建"
            echo "- ✅ 优化系统兼容性和稳定性"
            echo ""
          fi
          
          echo "## 📦 安装说明"
          echo "1. **下载模块**: 选择适合您设备架构的模块包"
          echo "2. **刷入模块**: 在 Magisk 或 KernelSU 中安装"
          echo "3. **重启设备**: 使模块生效"
          echo "4. **配置设置**: 根据需求调整模块配置"
          echo ""
          echo "## ⚠️ 系统要求"
          echo "- **最低 Android 版本**: 9.0 (API 28)"
          echo "- **架构支持**: ARM, ARM64"
          echo "- **ROOT 环境**: Magisk 或 KernelSU"
          echo ""
          echo "## ⚠️ 注意事项"
          echo "- 💾 **备份数据**: 安装前请备份重要数据"
          echo "- 📱 **兼容性**: 确保设备运行 Android 9.0 或更高版本"
          echo "- 🔄 **更新建议**: 建议从旧版本升级时先卸载旧版再安装新版"
          echo "- ❓ **问题反馈**: 如遇问题请提交 Issue 并提供详细日志"
        } > changelog.md
        
        # 读取文件内容到变量
        CHANGELOG_CONTENT=$(cat changelog.md)
        
        # 输出内容到步骤输出
        echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "✅ Fully customized changelog prepared successfully with NDK R28 and API 28 info"

    - name: Upload changelog artifact
      uses: actions/upload-artifact@v4
      with:
        name: changelog-${{ github.run_id }}-${{ github.run_attempt }}
        path: changelog.md
        retention-days: 1

  update-all-json-files:
    runs-on: ubuntu-latest
    needs: [version-setup, prepare-changelog]
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update all JSON files with API 28 support
      run: |
        echo "Updating all JSON files for version ${{ needs.version-setup.outputs.version }} with API 28"
        
        # 更新所有4个JSON文件，添加minApi字段
        jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
           --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
           --arg minApi "${{ env.ANDROID_API_LEVEL }}" \
           --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-basic-arm.zip" \
           --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
           '.version = $version | .versionCode = ($versionCode | tonumber) | .minApi = ($minApi | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
           basic/arm.json > temp1.json && mv temp1.json basic/arm.json
        
        jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
           --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
           --arg minApi "${{ env.ANDROID_API_LEVEL }}" \
           --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-basic-arm64.zip" \
           --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
           '.version = $version | .versionCode = ($versionCode | tonumber) | .minApi = ($minApi | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
           basic/arm64.json > temp2.json && mv temp2.json basic/arm64.json
        
        jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
           --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
           --arg minApi "${{ env.ANDROID_API_LEVEL }}" \
           --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-multi-arm.zip" \
           --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
           '.version = $version | .versionCode = ($versionCode | tonumber) | .minApi = ($minApi | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
           multi/arm.json > temp3.json && mv temp3.json multi/arm.json
        
        jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
           --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
           --arg minApi "${{ env.ANDROID_API_LEVEL }}" \
           --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-multi-arm64.zip" \
           --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
           '.version = $version | .versionCode = ($versionCode | tonumber) | .minApi = ($minApi | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
           multi/arm64.json > temp4.json && mv temp4.json multi/arm64.json
        
        echo "All JSON files updated successfully with API 28 support"

    - name: Commit and push all JSON files
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add basic/arm.json basic/arm64.json multi/arm.json multi/arm64.json
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ci: update all JSON files for version ${{ needs.version-setup.outputs.version }} with API 28 support"
          git pull --rebase origin main
          git push origin main
          echo "Successfully updated all JSON files with API 28 support"
        fi

  build:
    runs-on: ubuntu-latest
    needs: [version-setup, setup-android-ndk, prepare-changelog]
    strategy:
      matrix:
        include:
          - arch: arm64
            goarch: arm64
            module_type: basic
            source_dir: basic
            module_prop_dir: arm64
            android_triple: aarch64-linux-android
          - arch: arm
            goarch: arm
            module_type: basic
            source_dir: basic
            module_prop_dir: arm
            android_triple: armv7a-linux-androideabi
          - arch: arm64
            goarch: arm64
            module_type: multi
            source_dir: multi
            module_prop_dir: arm64
            android_triple: aarch64-linux-android
          - arch: arm
            goarch: arm
            module_type: multi
            source_dir: multi
            module_prop_dir: arm
            android_triple: armv7a-linux-androideabi

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check build condition
      id: check_build
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.build_type }}" == "all" || "${{ github.event.inputs.build_type }}" == "${{ matrix.module_type }}" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi

    - name: Initialize and verify Go modules with dependency resolution
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        echo "📦 Setting up Go modules with comprehensive dependency resolution..."
        
        # 切换到 source 目录
        cd source
        
        # 显示当前目录结构用于调试
        echo "📁 Current source directory structure:"
        find . -name "*.go" -type f | head -20 || echo "No Go files found"
        echo "---"
        ls -la
        
        # 备份现有的 go.mod（如果有）
        if [ -f "go.mod" ]; then
          cp go.mod go.mod.backup
          echo "📄 Backed up existing go.mod"
          echo "🔍 Current go.mod content:"
          cat go.mod || echo "Cannot read go.mod"
        fi
        
        # 重新初始化模块（使用正确的模块路径）
        echo "🔄 Initializing Go module with proper path..."
        if [ -f "go.mod" ]; then
          # 如果已存在go.mod，确保模块路径正确
          CURRENT_MODULE=$(head -n1 go.mod | cut -d' ' -f2)
          echo "Current module path: $CURRENT_MODULE"
          
          # 如果模块路径不正确，重新初始化
          if [[ "$CURRENT_MODULE" != *"ez-clean"* ]]; then
            echo "⚠️ Module path may be incorrect, reinitializing..."
            go mod init github.com/${{ github.repository }}/source 2>/dev/null || go mod init ez-clean/source
          fi
        else
          echo "Creating new go.mod file..."
          go mod init github.com/${{ github.repository }}/source 2>/dev/null || go mod init ez-clean/source
        fi
        
        # 显示模块信息
        echo "📋 Final module info:"
        cat go.mod || echo "No go.mod file"
        
        # 强制下载所有依赖
        echo "⬇️ Downloading dependencies with verbose output..."
        GOPROXY=direct go mod download -x 2>&1 | tail -30 || echo "Download completed with possible warnings"
        
        # 整理依赖
        echo "🔧 Tidying modules..."
        go mod tidy -v 2>&1 | tail -20 || echo "Tidy completed"
        
        # 验证模块
        echo "🔍 Verifying module dependencies..."
        go mod verify 2>&1 || echo "Module verification completed"
        
        # 检查模块图以确保所有依赖都正确解析
        echo "📊 Module dependency graph:"
        go mod graph | head -20 || echo "Module graph not available"
        
        # 特别检查本地包是否可以被解析
        echo "🔎 Checking if local packages can be resolved..."
        for pkg in $(find . -name "*.go" -type f -exec grep -h "^package" {} \; | sort | uniq); do
          if [[ "$pkg" == package* ]]; then
            echo "  Found: $pkg"
          fi
        done
        
        echo "✅ Go module setup completed with comprehensive verification"

    - name: Build Go binary for Android with NDK R28
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        # 设置Go编译环境 - 启用CGO
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CGO_ENABLED=1
        export GOPROXY=https://goproxy.cn,direct  # 使用国内代理加速下载
        
        # 设置Android NDK工具链 - 使用API级别28
        export API_LEVEL=${{ env.ANDROID_API_LEVEL }}
        
        # 设置编译器路径
        export CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.android_triple }}$API_LEVEL-clang
        export CXX=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.android_triple }}$API_LEVEL-clang++
        
        echo "🚀 Building for Android with NDK R28 (API $API_LEVEL):"
        echo "  GOOS: $GOOS"
        echo "  GOARCH: $GOARCH" 
        echo "  CGO_ENABLED: $CGO_ENABLED"
        echo "  CC: $CC"
        echo "  API Level: $API_LEVEL"
        echo "  Build Directory: source/"
        echo "  GOPROXY: $GOPROXY"
        
        # 验证编译器
        $CC --version || echo "Compiler check completed"
        
        # 验证Go环境
        echo "🔧 Go environment:"
        go env GOPATH GOOS GOARCH CGO_ENABLED
        
        # 编译Go二进制文件 - 直接编译特定的Go文件
        cd source
        echo "🏗️ Building Go binary for ${{ matrix.module_type }}..."
        
        # 根据模块类型选择要构建的特定Go文件
        if [[ "${{ matrix.module_type }}" == "basic" ]]; then
          echo "📄 Compiling basic.go..."
          go build -v -ldflags="-s -w" -o ../EZ-basic basic.go
        elif [[ "${{ matrix.module_type }}" == "multi" ]]; then
          echo "📄 Compiling multi.go..."
          go build -v -ldflags="-s -w" -o ../EZ-multi multi.go
        fi
        
        cd ..
        
        echo "✅ Go binary built successfully with NDK R28"
        echo "📦 Binary details:"
        file EZ-${{ matrix.module_type }}
        ls -lh EZ-*
        echo "🔍 Binary info:"
        readelf -h EZ-${{ matrix.module_type }} 2>/dev/null || echo "Not an ELF binary"

    - name: Prepare module files
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        # 创建模块目录
        mkdir -p build/${{ matrix.module_type }}-${{ matrix.arch }}
        
        echo "📁 Preparing module files for ${{ matrix.module_type }}-${{ matrix.arch }}"
        
        # 复制基础模块文件
        cp -r module/META-INF build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/whitelist.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/blacklist.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/App.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/service.sh build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/customize.sh build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/reload.sh build/${{ matrix.module_type }}-${{ matrix.arch }}/
        
        # 复制二进制文件 - 使用版本特定名称
        cp EZ-${{ matrix.module_type }} build/${{ matrix.module_type }}-${{ matrix.arch }}/EZ
        
        # 复制共享的 config.conf 文件
        cp module/config.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        
        # 对于 multi 类型，额外复制 multi_config.conf
        if [[ "${{ matrix.module_type }}" == "multi" ]]; then
          echo "📄 Copying multi_config.conf for multi module"
          cp module/multi_config.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        fi
        
        # 复制并更新module.prop文件
        cp module/${{ matrix.module_type }}/${{ matrix.module_prop_dir }}/module.prop build/${{ matrix.module_type }}-${{ matrix.arch }}/
        
        # 更新版本信息
        sed -i "s|^version=.*|version=${{ needs.version-setup.outputs.version }}|" build/${{ matrix.module_type }}-${{ matrix.arch }}/module.prop
        sed -i "s|^versionCode=.*|versionCode=${{ needs.version-setup.outputs.version_code }}|" build/${{ matrix.module_type }}-${{ matrix.arch }}/module.prop
        
        # 添加API级别信息到模块属性
        echo "minApi=${{ env.ANDROID_API_LEVEL }}" >> build/${{ matrix.module_type }}-${{ matrix.arch }}/module.prop
        
        echo "✅ Module files prepared with API level ${{ env.ANDROID_API_LEVEL }}"
        echo "📝 Version: ${{ needs.version-setup.outputs.version }}"
        echo "🔢 Version Code: ${{ needs.version-setup.outputs.version_code }}"
        echo "📦 Binary: EZ-${{ matrix.module_type }} -> EZ"
        echo "📄 Config files: config.conf" 
        if [[ "${{ matrix.module_type }}" == "multi" ]]; then
          echo "📄 Additional config: multi_config.conf"
        fi

    - name: Package modules
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        cd build
        echo "📦 Packaging modules..."
        
        for dir in */; do
          if [ -d "$dir" ]; then
            dir_name=$(basename "${dir%/}")
            zip_name="EZ-Clean-${dir_name}.zip"
            
            echo "Creating: $zip_name"
            cd "$dir_name"
            zip -r "../$zip_name" .
            cd ..
            
            echo "✅ Created: $zip_name"
          fi
        done
        
        echo "=== All packages ==="
        ls -la *.zip

    - name: Verify artifacts
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        echo "🔍 Verifying artifacts..."
        expected_zip="build/EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip"
        
        if [ -f "$expected_zip" ]; then
          echo "✅ Found: $expected_zip"
          echo "📊 Size: $(du -h "$expected_zip" | cut -f1)"
          
          # 验证zip内容
          echo "📁 Contents:"
          unzip -l "$expected_zip" | head -10
          
          # 检查关键文件
          echo "🔍 Essential files:"
          unzip -l "$expected_zip" | grep -E "(EZ|module.prop|config.conf|service.sh)" || echo "Some files missing!"
          
          # 检查API级别信息
          if unzip -p "$expected_zip" module.prop | grep -q "minApi=28"; then
            echo "✅ API level 28 correctly set in module.prop"
          else
            echo "❌ API level not found in module.prop"
          fi
          
          # 对于 multi 类型，额外检查 multi_config.conf
          if [[ "${{ matrix.module_type }}" == "multi" ]]; then
            echo "🔍 Checking multi_config.conf for multi module:"
            unzip -l "$expected_zip" | grep "multi_config.conf" || echo "multi_config.conf missing!"
          fi
          
        else
          echo "❌ Missing: $expected_zip"
          ls -la build/
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: steps.check_build.outputs.should_build == 'true'
      with:
        name: EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}-api28
        path: build/EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip
        retention-days: 1
        if-no-files-found: error

    # 添加自动重试机制
    - name: Rerun failed workflow (auto-retry)
      if: failure() && fromJSON(github.run_attempt) < 3
      run: |
        echo "🔄 Auto-retry mechanism triggered (attempt ${{ github.run_attempt }}/3)"

  release:
    runs-on: ubuntu-latest
    needs: [build, update-all-json-files, prepare-changelog]
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped')
    env:
      TZ: Asia/Shanghai

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: EZ-Clean-*
        merge-multiple: true

    - name: Download changelog artifact
      uses: actions/download-artifact@v4
      with:
        name: changelog-${{ github.run_id }}-${{ github.run_attempt }}
        path: artifacts

    - name: Read version info
      id: version
      run: |
        VERSION="${{ needs.version-setup.outputs.version }}"
        VERSION_CODE="${{ needs.version-setup.outputs.version_code }}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
        echo "Using version code: $VERSION_CODE"

    - name: Get current timestamp (Beijing Time)
      id: timestamp
      run: |
        echo "BUILD_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Verify all artifacts
      run: |
        echo "🔍 Verifying all release artifacts with API 28 support"
        
        ZIP_COUNT=$(find artifacts -name "*.zip" -type f | wc -l)
        CHANGELOG_COUNT=$(find artifacts -name "changelog.md" -type f | wc -l)
        
        echo "Found $ZIP_COUNT ZIP files and $CHANGELOG_COUNT changelog files"
        
        if [ $ZIP_COUNT -eq 4 ] && [ $CHANGELOG_COUNT -eq 1 ]; then
          echo "✅ All artifacts present"
          
          # 验证每个zip文件
          for file in artifacts/*.zip; do
            echo "Checking: $(basename "$file")"
            if unzip -t "$file" > /dev/null 2>&1; then
              echo "  ✅ Valid zip"
              # 检查API级别信息
              if unzip -p "$file" module.prop | grep -q "minApi=28"; then
                echo "  ✅ API level 28 verified"
              else
                echo "  ❌ API level 28 missing"
                exit 1
              fi
            else
              echo "  ❌ Corrupted zip"
              exit 1
            fi
          done
          
          # 特别验证 multi 模块包含 multi_config.conf
          echo "🔍 Verifying multi modules have multi_config.conf..."
          for file in artifacts/EZ-Clean-multi-*.zip; do
            if [ -f "$file" ]; then
              echo "Checking multi_config.conf in: $(basename "$file")"
              if unzip -l "$file" | grep -q "multi_config.conf"; then
                echo "  ✅ multi_config.conf found"
              else
                echo "  ❌ multi_config.conf missing"
                exit 1
              fi
            fi
          done
        else
          echo "❌ Missing artifacts"
          find artifacts -type f | sort
          exit 1
        fi

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }} (API 28+)
        files: |
          artifacts/EZ-Clean-basic-arm.zip
          artifacts/EZ-Clean-basic-arm64.zip
          artifacts/EZ-Clean-multi-arm.zip
          artifacts/EZ-Clean-multi-arm64.zip
          artifacts/changelog.md
        body: |
          ${{ needs.prepare-changelog.outputs.changelog_content }}
          
          ## 🛠 构建信息
          - **NDK 版本**: R28 (${{ env.ANDROID_NDK_VERSION }})
          - **最低 Android 版本**: 9.0 (API 28)
          - **Go 版本**: ${{ env.GO_VERSION }}
          - **架构支持**: ARM, ARM64
          - **模块类型**: Basic, Multi

    - name: Cleanup old workflows
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 1

    - name: Cleanup old artifacts
      uses: c-hive/gha-remove-artifacts@v1.4.0
      with:
        age: '3 days'