name: Build and Release EZ-Clean Module

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
        default: 'v1.0.0'
      build_type:
        description: 'Build type'
        required: true
        type: choice
        options:
          - all
          - basic
          - multi

env:
  GO_VERSION: '1.21'
  NDK_VERSION: 'r26b'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Basic version builds
          - arch: arm64
            goarch: arm64
            cc: aarch64-linux-android24-clang
            module_type: basic
            source_file: main.go
          - arch: arm
            goarch: arm
            cc: armv7a-linux-androideabi24-clang
            module_type: basic
            source_file: main.go
          # Multi version builds  
          - arch: arm64
            goarch: arm64
            cc: aarch64-linux-android24-clang
            module_type: multi
            source_file: ez.go
          - arch: arm
            goarch: arm
            cc: armv7a-linux-androideabi24-clang
            module_type: multi
            source_file: ez.go

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=$PWD/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "$PWD/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        echo "Using version: ${{ steps.version.outputs.VERSION }}"

    - name: Check build condition
      id: check_build
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.build_type }}" == "all" || "${{ github.event.inputs.build_type }}" == "${{ matrix.module_type }}" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi

    - name: Build module
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CC=${{ matrix.cc }}
        export CGO_ENABLED=1
        
        # Build Go binary
        cd source
        go build -ldflags="-s -w" -o ../EZ ${{ matrix.source_file }}
        cd ..
        
        # Create build directory
        mkdir -p build/${{ matrix.module_type }}_${{ matrix.arch }}
        
        # Copy common files
        cp -r META-INF whitelist.conf blacklist.conf MT.conf service.sh customize.sh reload.sh config.conf build/${{ matrix.module_type }}_${{ matrix.arch }}/
        cp EZ build/${{ matrix.module_type }}_${{ matrix.arch }}/
        
        # Copy and update module.prop
        cp ${{ matrix.module_type }}/module.prop build/${{ matrix.module_type }}_${{ matrix.arch }}/
        
        # Use alternative sed delimiter to avoid issues with forward slashes
        sed -i "s|version=.*|version=${{ steps.version.outputs.VERSION }}|" build/${{ matrix.module_type }}_${{ matrix.arch }}/module.prop
        sed -i "s|versionCode=.*|versionCode=1|" build/${{ matrix.module_type }}_${{ matrix.arch }}/module.prop
        
        # Copy and update update.json
        cp ${{ matrix.module_type }}/update.json build/${{ matrix.module_type }}_${{ matrix.arch }}/
        
        # Use jq for JSON manipulation if available, otherwise use sed
        if command -v jq &> /dev/null; then
          jq --arg version "${{ steps.version.outputs.VERSION }}" \
             --arg zipUrl "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip" \
             '.version = $version | .versionCode = 1 | .zipUrl = $zipUrl' \
             build/${{ matrix.module_type }}_${{ matrix.arch }}/update.json > temp.json && \
          mv temp.json build/${{ matrix.module_type }}_${{ matrix.arch }}/update.json
        else
          sed -i "s|\"version\": \".*\"|\"version\": \"${{ steps.version.outputs.VERSION }}\"|" build/${{ matrix.module_type }}_${{ matrix.arch }}/update.json
          sed -i "s|\"versionCode\": [0-9]*|\"versionCode\": 1|" build/${{ matrix.module_type }}_${{ matrix.arch }}/update.json
          sed -i "s|EZ-Clean-${{ matrix.module_type }}-.*\\.zip|EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip|" build/${{ matrix.module_type }}_${{ matrix.arch }}/update.json
        fi
        
        echo "Built ${{ matrix.module_type }} version for ${{ matrix.arch }}"

    - name: Package modules
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        cd build
        for dir in */; do
          if [ -d "$dir" ]; then
            zip_name=$(basename "${dir%/}").zip
            echo "Packaging $dir to $zip_name"
            zip -r "$zip_name" "$dir"
            echo "Created: $zip_name"
          fi
        done
        echo "=== Built packages ==="
        ls -la *.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}
        path: build/${{ matrix.module_type }}_${{ matrix.arch }}.zip
        retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: EZ-Clean-*
        merge-multiple: true

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: List downloaded artifacts
      run: |
        echo "=== Downloaded artifacts ==="
        find artifacts -name "*.zip" | sort
        echo "=== Total files ==="
        find artifacts -name "*.zip" | wc -l

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        files: artifacts/**/*.zip
        body: |
          # EZ-Clean Module Release ${{ steps.version.outputs.VERSION }}
          
          ## 说明
          请根据CPU架构下载对应版本的模块包！支持magisk和kernelsu刷入。
          
          ### 版本区别
          - **basic** 为基础款，包含功能：常规清理、MT触发清理、系统感知等基础功能。
          - **multi** 为高级款，包含基础功能和系统感知、程序健康报告、性能指标、系统自适应等特殊功能。
          
          ### 支持架构
          - arm64-v8a (第8代64位ARM处理器，兼容32位，性能更高，新设备标配)
          - armeabi-v7a (第7代ARM处理器，支持硬件浮点运算，主流设备采用)
          
          ### 安装说明
          1. 下载对应架构的zip文件
          2. 在Magisk或KernelSU中刷入
          3. 重启设备生效
          
          ## 构建信息
          - 触发方式: ${{ github.event_name }}
          - 构建时间: ${{ fromJSON(format('"{0}"', github.event.head_commit.timestamp || now())) }}