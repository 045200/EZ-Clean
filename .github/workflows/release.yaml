name: Build and Release EZ-Clean Module

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - multi

env:
  GO_VERSION: '1.21'
  NDK_VERSION: 'r26b'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: arm64
            goarch: arm64
            cc: aarch64-linux-android24-clang
          - arch: arm
            goarch: arm
            cc: armv7a-linux-androideabi24-clang
          - arch: x86
            goarch: 386
            cc: i686-linux-android24-clang
          - arch: x86_64
            goarch: amd64
            cc: x86_64-linux-android24-clang

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=$PWD/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "$PWD/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    - name: Build basic version
      if: github.event.inputs.version_type != 'multi' || github.event.inputs.version_type == 'basic'
      run: |
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CC=${{ matrix.cc }}
        export CGO_ENABLED=1
        
        cd source
        go build -ldflags="-s -w" -o ../EZ main.go
        cd ..
        
        mkdir -p build/basic_${{ matrix.arch }}/META-INF/com/google/android
        cp -r META-INF whitelist.conf blacklist.conf MT.conf service.sh customize.sh reload.sh config.conf build/basic_${{ matrix.arch }}/
        cp EZ build/basic_${{ matrix.arch }}/
        
        # Generate module.prop for basic version
        cat > build/basic_${{ matrix.arch }}/module.prop << EOF
id=EZ-Clean-basic
name=EZ Clean (Basic)
version=v${GITHUB_REF#refs/tags/v}
versionCode=1
author=EZ-Team
description=Basic cleaning functionality with system perception
support=https://github.com/045200
EOF
        
        # Generate update.json
        cat > build/basic_${{ matrix.arch }}/update.json << EOF
{
  "version": "v${GITHUB_REF#refs/tags/v}",
  "versionCode": 1,
  "zipUrl": "https://github.com/your-username/your-repo/releases/download/v${GITHUB_REF#refs/tags/v}/EZ-Clean-basic-${{ matrix.arch }}.zip",
  "changelog": "https://github.com/045200/EZ-Clean/releases/tag/v${GITHUB_REF#refs/tags/v}"
}
EOF

    - name: Build multi version
      if: github.event.inputs.version_type != 'basic' || github.event.inputs.version_type == 'multi'
      run: |
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CC=${{ matrix.cc }}
        export CGO_ENABLED=1
        
        cd source
        go build -ldflags="-s -w" -o ../EZ ez.go
        cd ..
        
        mkdir -p build/multi_${{ matrix.arch }}/META-INF/com/google/android
        cp -r META-INF whitelist.conf blacklist.conf MT.conf service.sh customize.sh reload.sh config.conf build/multi_${{ matrix.arch }}/
        cp EZ build/multi_${{ matrix.arch }}/
        
        # Generate module.prop for multi version
        cat > build/multi_${{ matrix.arch }}/module.prop << EOF
id=EZ-Clean-multi
name=EZ Clean (Multi)
version=v${GITHUB_REF#refs/tags/v}
versionCode=1
author=EZ-Team
description=Advanced cleaning with health reports, metrics and adaptive features
support=https://github.com/045200
EOF
        
        # Generate update.json
        cat > build/multi_${{ matrix.arch }}/update.json << EOF
{
  "version": "v${GITHUB_REF#refs/tags/v}",
  "versionCode": 1,
  "zipUrl": "https://github.com/045200/EZ-Clean/releases/download/v${GITHUB_REF#refs/tags/v}/EZ-Clean-multi-${{ matrix.arch }}.zip",
  "changelog": "https://github.com/045200/EZ-Clean/releases/tag/v${GITHUB_REF#refs/tags/v}"
}
EOF

    - name: Create installation scripts
      run: |
        # Create update-binary for Magisk
        for dir in build/*/; do
          cat > "$dir/META-INF/com/google/android/update-binary" << 'EOF'
#!/sbin/sh
umask 022
ui_print() { echo "$1"; }
require_new_magisk() {
  ui_print "*******************************"
  ui_print " EZ-Clean Module Installer "
  ui_print "*******************************"
}
require_new_magisk
ui_print "- Mounting system"
mount /system 2>/dev/null
ui_print "- Installing module files"
mkdir -p $MODPATH
cp -rf $(dirname $0)/../../* $MODPATH/
ui_print "- Setting permissions"
set_perm_recursive $MODPATH/EZ 0 0 0755 0755
ui_print "- Installation complete"
EOF
          
          chmod +x "$dir/META-INF/com/google/android/update-binary"
        done

    - name: Package modules
      run: |
        cd build
        for dir in */; do
          zip_name=$(basename "${dir%/}").zip
          zip -r "$zip_name" "$dir"
          echo "Created: $zip_name"
        done
        ls -la *.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ez-clean-modules-${{ matrix.arch }}
        path: build/*.zip
        retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List artifacts
      run: find artifacts -name "*.zip" | sort

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*.zip
        body: |
          # EZ-Clean Module Release
          
          ## 说明
          请根据CPU架构下载对应版本的模块包！支持magisk和kernelsu刷入。
          
          ### 版本区别
          - **basic** 为基础款，包含功能：常规清理、MT触发清理、系统感知等基础功能。
          - **multi** 为高级款，包含基础功能和系统感知、程序健康报告、性能指标、系统自适应等特殊功能。
          
          ### 支持架构
          - arm64 (大多数现代Android设备)
          - arm (旧款Android设备)  
          - x86 (Android模拟器、Intel设备)
          - x86_64 (64位Intel设备)
          
          ### 安装说明
          1. 下载对应架构的zip文件
          2. 在Magisk或KernelSU中刷入
          3. 重启设备生效