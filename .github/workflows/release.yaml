name: Build and Release EZ-Clean Module

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - multi

env:
  GO_VERSION: '1.21'
  NDK_VERSION: 'r26b'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: arm64
            goarch: arm64
            cc: aarch64-linux-android24-clang
          - arch: arm
            goarch: arm
            cc: armv7a-linux-androideabi24-clang

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=$PWD/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "$PWD/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    - name: Build basic version
      if: ${{ github.event.inputs.version_type != 'multi' }}
      run: |
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CC=${{ matrix.cc }}
        export CGO_ENABLED=1
        
        cd source
        go build -ldflags="-s -w" -o ../EZ main.go
        cd ..
        
        mkdir -p build/basic_${{ matrix.arch }}
        cp -r META-INF whitelist.conf blacklist.conf MT.conf service.sh customize.sh reload.sh config.conf build/basic_${{ matrix.arch }}/
        cp EZ build/basic_${{ matrix.arch }}/
        
        # Copy module.prop and update.json from repository
        cp basic/module.prop build/basic_${{ matrix.arch }}/
        cp basic/update.json build/basic_${{ matrix.arch }}/
        
        # Update version in module.prop
        sed -i "s/version=.*/version=v${GITHUB_REF#refs/tags/v}/" build/basic_${{ matrix.arch }}/module.prop
        sed -i "s/versionCode=.*/versionCode=1/" build/basic_${{ matrix.arch }}/module.prop
        
        # Update version and zipUrl in update.json
        sed -i "s/\"version\": \".*\"/\"version\": \"v${GITHUB_REF#refs/tags/v}\"/" build/basic_${{ matrix.arch }}/update.json
        sed -i "s/\"versionCode\": [0-9]*/\"versionCode\": 1/" build/basic_${{ matrix.arch }}/update.json
        sed -i "s|EZ-Clean-basic-.*\\.zip|EZ-Clean-basic-${{ matrix.arch }}.zip|" build/basic_${{ matrix.arch }}/update.json

    - name: Build multi version
      if: ${{ github.event.inputs.version_type != 'basic' }}
      run: |
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CC=${{ matrix.cc }}
        export CGO_ENABLED=1
        
        cd source
        go build -ldflags="-s -w" -o ../EZ ez.go
        cd ..
        
        mkdir -p build/multi_${{ matrix.arch }}
        cp -r META-INF whitelist.conf blacklist.conf MT.conf service.sh customize.sh reload.sh config.conf build/multi_${{ matrix.arch }}/
        cp EZ build/multi_${{ matrix.arch }}/
        
        # Copy module.prop and update.json from repository
        cp multi/module.prop build/multi_${{ matrix.arch }}/
        cp multi/update.json build/multi_${{ matrix.arch }}/
        
        # Update version in module.prop
        sed -i "s/version=.*/version=v${GITHUB_REF#refs/tags/v}/" build/multi_${{ matrix.arch }}/module.prop
        sed -i "s/versionCode=.*/versionCode=1/" build/multi_${{ matrix.arch }}/module.prop
        
        # Update version and zipUrl in update.json
        sed -i "s/\"version\": \".*\"/\"version\": \"v${GITHUB_REF#refs/tags/v}\"/" build/multi_${{ matrix.arch }}/update.json
        sed -i "s/\"versionCode\": [0-9]*/\"versionCode\": 1/" build/multi_${{ matrix.arch }}/update.json
        sed -i "s|EZ-Clean-multi-.*\\.zip|EZ-Clean-multi-${{ matrix.arch }}.zip|" build/multi_${{ matrix.arch }}/update.json

    - name: Package modules
      run: |
        cd build
        for dir in */; do
          zip_name=$(basename "${dir%/}").zip
          zip -r "$zip_name" "$dir"
          echo "Created: $zip_name"
        done
        ls -la *.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EZ-Clean-modules-${{ matrix.arch }}
        path: build/*.zip
        retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List artifacts
      run: find artifacts -name "*.zip" | sort

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*.zip
        body: |
          # EZ-Clean Module Release
          
          ## 说明
          请根据CPU架构下载对应版本的模块包！支持magisk和kernelsu刷入。
          
          ### 版本区别
          - **basic** 为基础款，包含功能：常规清理、MT触发清理、系统感知等基础功能。
          - **multi** 为高级款，包含基础功能和系统感知、程序健康报告、性能指标、系统自适应等特殊功能。
          
          ### 支持架构
          - arm64-v8a (第8代64位ARM处理器，兼容32位，性能更高，新设备标配)
          - armeabi-v7a (第7代ARM处理器，支持硬件浮点运算，主流设备采用)
          
          ### 安装说明
          1. 下载对应架构的zip文件
          2. 在Magisk或KernelSU中刷入
          3. 重启设备生效