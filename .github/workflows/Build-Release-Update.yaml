name: Build Release and Update

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
        default: 'v1.0.0'
      version_code:
        description: 'Version code (e.g., 1, 2, 3)'
        required: true
        type: string
        default: '1'
      build_type:
        description: 'Build type'
        required: true
        type: choice
        options:
          - all
          - basic
          - multi

      # 自定义更新内容部分
      custom_title_1:
        description: '第一个自定义标题 (支持Markdown格式，留空则跳过此部分)'
        required: false
        type: string
        default: ''
      custom_content_1_1:
        description: '第一个标题下的内容项 1 (留空则跳过)'
        required: false
        type: string
        default: ''
      custom_content_1_2:
        description: '第一个标题下的内容项 2 (留空则跳过)'
        required: false
        type: string
        default: ''

      custom_title_2:
        description: '第二个自定义标题 (支持Markdown格式，留空则跳过此部分)'
        required: false
        type: string
        default: ''
      custom_content_2_1:
        description: '第二个标题下的内容项 1 (留空则跳过)'
        required: false
        type: string
        default: ''
      custom_content_2_2:
        description: '第二个标题下的内容项 2 (留空则跳过)'
        required: false
        type: string
        default: ''

env:
  GO_VERSION: '1.25'
  ANDROID_NDK_VERSION: 'r28b'
  ANDROID_API_LEVEL: '28'

jobs:
  version-setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      version_code: ${{ steps.version.outputs.VERSION_CODE }}
      build_type: ${{ steps.build_type.outputs.BUILD_TYPE }}
    steps:
    - name: Determine version and version code
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=${{ github.event.inputs.version_code }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=1" >> $GITHUB_OUTPUT
        fi
        echo "Using version: ${{ steps.version.outputs.VERSION }}"
        echo "Using version code: ${{ steps.version.outputs.VERSION_CODE }}"

    - name: Determine build type
      id: build_type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "BUILD_TYPE=${{ github.event.inputs.build_type }}" >> $GITHUB_OUTPUT
        else
          echo "BUILD_TYPE=all" >> $GITHUB_OUTPUT
        fi
        echo "Build type: ${{ steps.build_type.outputs.BUILD_TYPE }}"

  setup-android-ndk:
    runs-on: ubuntu-latest
    outputs:
      ndk-home: ${{ steps.setup-ndk.outputs.ndk-home }}
    steps:
    - name: Setup Android NDK R28
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}

    - name: Verify NDK installation
      run: |
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "NDK toolchain contents:"
        ls $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/*-clang | head -10
        echo "✅ NDK R28 setup completed"

  prepare-changelog:
    runs-on: ubuntu-latest
    needs: [version-setup, setup-android-ndk]
    outputs:
      changelog_content: ${{ steps.prepare_changelog.outputs.changelog_content }}
    steps:
    - name: Get current timestamp (Beijing Time)
      id: timestamp
      run: |
        echo "BUILD_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Prepare fully customized changelog content
      id: prepare_changelog
      run: |
        # 创建 changelog.md 文件 - 使用动态内容生成
        {
          echo "# EZ-Clean ${{ needs.version-setup.outputs.version }} 更新日志"
          echo ""
          echo "## 📋 版本概览"
          echo "*版本: ${{ needs.version-setup.outputs.version }}*  "
          echo "*版本代码: ${{ needs.version-setup.outputs.version_code }}*  "
          echo "*构建时间: ${{ steps.timestamp.outputs.BUILD_TIME }}*"
          echo "*构建类型: ${{ needs.version-setup.outputs.build_type }}*"
          echo "*最低支持: Android 9.0 (API 28)*"
          echo "*构建工具: NDK R28 + Go ${{ env.GO_VERSION }}*"
          echo ""
          
          # 第一个标题部分
          if [ -n "${{ github.event.inputs.custom_title_1 }}" ]; then
            echo "${{ github.event.inputs.custom_title_1 }}"
            
            if [ -n "${{ github.event.inputs.custom_content_1_1 }}" ]; then
              echo "${{ github.event.inputs.custom_content_1_1 }}"
            fi
            
            if [ -n "${{ github.event.inputs.custom_content_1_2 }}" ]; then
              echo "${{ github.event.inputs.custom_content_1_2 }}"
            fi
            
            echo ""
          fi
          
          # 第二个标题部分
          if [ -n "${{ github.event.inputs.custom_title_2 }}" ]; then
            echo "${{ github.event.inputs.custom_title_2 }}"
            
            if [ -n "${{ github.event.inputs.custom_content_2_1 }}" ]; then
              echo "${{ github.event.inputs.custom_content_2_1 }}"
            fi
            
            if [ -n "${{ github.event.inputs.custom_content_2_2 }}" ]; then
              echo "${{ github.event.inputs.custom_content_2_2 }}"
            fi
            
            echo ""
          fi
          
          # 如果没有自定义内容
          if [ -z "${{ github.event.inputs.custom_title_1 }}" ] && [ -z "${{ github.event.inputs.custom_title_2 }}" ]; then
            echo "## 🔧 技术更新"
            echo "- ✅ 提升最低支持到 Android 9.0 (API 28)"
            echo "- ✅ 使用 NDK R28 工具链构建"
            echo "- ✅ 优化系统兼容性和稳定性"
            echo ""
          fi
          
          echo "## 📦 安装说明"
          echo "1. **下载模块**: 选择适合您设备架构的模块包"
          echo "2. **刷入模块**: 在 Magisk 或 KernelSU 中安装"
          echo "3. **重启设备**: 使模块生效"
          echo "4. **配置设置**: 根据需求调整模块配置"
          echo ""
          echo "## ⚠️ 系统要求"
          echo "- **最低 Android 版本**: 9.0 (API 28)"
          echo "- **架构支持**: ARM, ARM64"
          echo "- **ROOT 环境**: Magisk 或 KernelSU"
          echo ""
          echo "## ⚠️ 注意事项"
          echo "- 💾 **备份数据**: 安装前请备份重要数据"
          echo "- 📱 **兼容性**: 确保设备运行 Android 9.0 或更高版本"
          echo "- 🔄 **更新建议**: 建议从旧版本升级时先卸载旧版再安装新版"
          echo "- ❓ **问题反馈**: 如遇问题请提交 Issue 并提供详细日志"
        } > changelog.md
        
        # 读取文件内容到变量
        CHANGELOG_CONTENT=$(cat changelog.md)
        
        # 输出内容到步骤输出
        echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "✅ Fully customized changelog prepared successfully with NDK R28 and API 28 info"

    - name: Upload changelog artifact
      uses: actions/upload-artifact@v4
      with:
        name: changelog-${{ github.run_id }}-${{ github.run_attempt }}
        path: changelog.md
        retention-days: 1

  update-json-files:
    runs-on: ubuntu-latest
    needs: [version-setup, prepare-changelog]
    permissions:
      contents: write
    outputs:
      updated_files: ${{ steps.determine_files.outputs.updated_files }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Determine which JSON files to update
      id: determine_files
      run: |
        BUILD_TYPE="${{ needs.version-setup.outputs.build_type }}"
        FILES=""
        
        case $BUILD_TYPE in
          "all")
            FILES="basic/arm.json basic/arm64.json multi/arm.json multi/arm64.json"
            ;;
          "basic")
            FILES="basic/arm.json basic/arm64.json"
            ;;
          "multi")
            FILES="multi/arm.json multi/arm64.json"
            ;;
        esac
        
        echo "updated_files=$FILES" >> $GITHUB_OUTPUT
        echo "Will update files: $FILES"

    - name: Update JSON files with API 28 support
      run: |
        echo "Updating JSON files for version ${{ needs.version-setup.outputs.version }} with API 28"
        echo "Build type: ${{ needs.version-setup.outputs.build_type }}"
        
        for json_file in ${{ steps.determine_files.outputs.updated_files }}; do
          echo "Processing: $json_file"
          
          # 提取模块类型和架构
          module_type=$(echo "$json_file" | cut -d'/' -f1)
          arch=$(basename "$json_file" .json)
          
          # 设置对应的zipUrl
          zipUrl="https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/EZ-Clean-${module_type}-${arch}.zip"
          
          jq -c --arg version "${{ needs.version-setup.outputs.version }}" \
                 --arg versionCode "${{ needs.version-setup.outputs.version_code }}" \
                 --arg minApi "${{ env.ANDROID_API_LEVEL }}" \
                 --arg zipUrl "$zipUrl" \
                 --arg changelog "https://github.com/${{ github.repository }}/releases/download/${{ needs.version-setup.outputs.version }}/changelog.md" \
                 '.version = $version | .versionCode = ($versionCode | tonumber) | .minApi = ($minApi | tonumber) | .zipUrl = $zipUrl | .changelog = $changelog' \
                 "$json_file" > "temp_${module_type}_${arch}.json"
        done
        
        # 移动临时文件到实际位置
        for temp_file in temp_*.json; do
          if [ -f "$temp_file" ]; then
            module_type=$(echo "$temp_file" | cut -d'_' -f2)
            arch=$(echo "$temp_file" | cut -d'_' -f3 | sed 's/.json//')
            mv "$temp_file" "${module_type}/${arch}.json"
            echo "Updated: ${module_type}/${arch}.json"
          fi
        done
        
        echo "JSON files updated successfully for build type: ${{ needs.version-setup.outputs.build_type }}"

    - name: Commit and push JSON files
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # 添加所有更新的文件
        git add ${{ steps.determine_files.outputs.updated_files }}
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ci: update ${{ needs.version-setup.outputs.build_type }} JSON files for version ${{ needs.version-setup.outputs.version }} with API 28 support"
          git pull --rebase origin main
          git push origin main
          echo "Successfully updated JSON files for build type: ${{ needs.version-setup.outputs.build_type }}"
        fi

  build:
    runs-on: ubuntu-latest
    needs: [version-setup, setup-android-ndk, prepare-changelog]
    strategy:
      matrix:
        include:
          - arch: arm64
            goarch: arm64
            module_type: basic
            source_dir: EZ-A
            module_prop_dir: arm64
            android_triple: aarch64-linux-android
          - arch: arm
            goarch: arm
            module_type: basic
            source_dir: EZ-A
            module_prop_dir: arm
            android_triple: armv7a-linux-androideabi
          - arch: arm64
            goarch: arm64
            module_type: multi
            source_dir: EZ-B
            module_prop_dir: arm64
            android_triple: aarch64-linux-android
          - arch: arm
            goarch: arm
            module_type: multi
            source_dir: EZ-B
            module_prop_dir: arm
            android_triple: armv7a-linux-androideabi

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check build condition
      id: check_build
      run: |
        BUILD_TYPE="${{ needs.version-setup.outputs.build_type }}"
        CURRENT_MODULE_TYPE="${{ matrix.module_type }}"
        
        echo "Build type: $BUILD_TYPE"
        echo "Current module type: $CURRENT_MODULE_TYPE"
        
        if [[ "$BUILD_TYPE" == "all" || "$BUILD_TYPE" == "$CURRENT_MODULE_TYPE" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "✅ Will build $CURRENT_MODULE_TYPE for ${{ matrix.arch }}"
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
          echo "⏭️ Skipping $CURRENT_MODULE_TYPE for ${{ matrix.arch }} (build type: $BUILD_TYPE)"
        fi

    - name: Setup Go dependencies
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        echo "📦 整理 Go 模块依赖..."
        go mod tidy
        echo "✅ 依赖整理完成"

    - name: Build Go binary for Android
      if: steps.check_build.outputs.should_build == 'true'
      env:
        GO111MODULE: on
      run: |
        # 设置 Go 编译环境
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CGO_ENABLED=1
        
        # 设置 Android NDK 工具链
        export API_LEVEL=${{ env.ANDROID_API_LEVEL }}
        export CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.android_triple }}$API_LEVEL-clang
        
        echo "🚀 构建 Android 二进制文件..."
        echo "GOOS: $GOOS"
        echo "GOARCH: $GOARCH"
        echo "CC: $CC"
        echo "源目录: ${{ matrix.source_dir }}"
        echo "模块类型: ${{ matrix.module_type }}"
        echo "架构: ${{ matrix.arch }}"
        
        # 验证编译器
        $CC --version || echo "编译器检查完成"
        
        # 使用详细输出构建
        go build -mod=mod -v -x -ldflags="-s -w" -o EZ-${{ matrix.module_type }} ./${{ matrix.source_dir }}
        
        echo "✅ 构建成功"
        file EZ-${{ matrix.module_type }}
        ls -lh EZ-*

    - name: Prepare module files
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        mkdir -p build/${{ matrix.module_type }}-${{ matrix.arch }}
        
        echo "📁 准备模块文件..."
        echo "模块类型: ${{ matrix.module_type }}"
        echo "架构: ${{ matrix.arch }}"
        
        # 复制基础文件
        cp -r module/META-INF build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/whitelist.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/blacklist.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/App.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/service.sh build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/customize.sh build/${{ matrix.module_type }}-${{ matrix.arch }}/
        cp module/reload.sh build/${{ matrix.module_type }}-${{ matrix.arch }}/
        
        # 复制二进制文件
        cp EZ-${{ matrix.module_type }} build/${{ matrix.module_type }}-${{ matrix.arch }}/EZ
        cp module/config.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
        
        # 对于 multi 类型，额外复制配置文件
        if [[ "${{ matrix.module_type }}" == "multi" ]]; then
          cp module/multi_config.conf build/${{ matrix.module_type }}-${{ matrix.arch }}/
          echo "✅ Added multi_config.conf for multi module"
        fi
        
        # 复制并更新 module.prop
        cp module/${{ matrix.module_type }}/${{ matrix.module_prop_dir }}/module.prop build/${{ matrix.module_type }}-${{ matrix.arch }}/
        
        # 更新版本信息
        sed -i "s|^version=.*|version=${{ needs.version-setup.outputs.version }}|" build/${{ matrix.module_type }}-${{ matrix.arch }}/module.prop
        sed -i "s|^versionCode=.*|versionCode=${{ needs.version-setup.outputs.version_code }}|" build/${{ matrix.module_type }}-${{ matrix.arch }}/module.prop
        echo "minApi=${{ env.ANDROID_API_LEVEL }}" >> build/${{ matrix.module_type }}-${{ matrix.arch }}/module.prop
        
        echo "✅ 模块文件准备完成"

    - name: Package module
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        cd build/${{ matrix.module_type }}-${{ matrix.arch }}
        zip -r ../EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip .
        cd ../..
        echo "✅ 打包完成: EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip"

    - name: Verify artifacts
      if: steps.check_build.outputs.should_build == 'true'
      run: |
        echo "🔍 Verifying artifacts..."
        expected_zip="build/EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip"
        
        if [ -f "$expected_zip" ]; then
          echo "✅ Found: $expected_zip"
          echo "📊 Size: $(du -h "$expected_zip" | cut -f1)"
          
          # 验证zip内容
          echo "📁 Contents:"
          unzip -l "$expected_zip" | head -10
          
          # 检查关键文件
          echo "🔍 Essential files:"
          unzip -l "$expected_zip" | grep -E "(EZ|module.prop|config.conf|service.sh)" || echo "Some files missing!"
          
          # 检查API级别信息
          if unzip -p "$expected_zip" module.prop | grep -q "minApi=28"; then
            echo "✅ API level 28 correctly set in module.prop"
          else
            echo "❌ API level not found in module.prop"
          fi
          
          # 对于 multi 类型，额外检查 multi_config.conf
          if [[ "${{ matrix.module_type }}" == "multi" ]]; then
            echo "🔍 Checking multi_config.conf for multi module:"
            if unzip -l "$expected_zip" | grep -q "multi_config.conf"; then
              echo "✅ multi_config.conf found"
            else
              echo "❌ multi_config.conf missing"
            fi
          fi
          
        else
          echo "❌ Missing: $expected_zip"
          ls -la build/
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: steps.check_build.outputs.should_build == 'true'
      with:
        name: EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}-api28
        path: build/EZ-Clean-${{ matrix.module_type }}-${{ matrix.arch }}.zip
        retention-days: 1
        if-no-files-found: error

    - name: Rerun failed workflow (auto-retry)
      if: failure() && fromJSON(github.run_attempt) < 3
      run: |
        echo "🔄 Auto-retry mechanism triggered (attempt ${{ github.run_attempt }}/3)"

  release:
    runs-on: ubuntu-latest
    needs: [build, update-json-files, prepare-changelog, version-setup]
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped')
    env:
      TZ: Asia/Shanghai
    outputs:
      release_files: ${{ steps.prepare_release.outputs.release_files }}

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: EZ-Clean-*
        merge-multiple: true

    - name: Download changelog artifact
      uses: actions/download-artifact@v4
      with:
        name: changelog-${{ github.run_id }}-${{ github.run_attempt }}
        path: artifacts

    - name: Read version info
      id: version
      run: |
        VERSION="${{ needs.version-setup.outputs.version }}"
        VERSION_CODE="${{ needs.version-setup.outputs.version_code }}"
        BUILD_TYPE="${{ needs.version-setup.outputs.build_type }}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
        echo "Using version code: $VERSION_CODE"
        echo "Build type: $BUILD_TYPE"

    - name: Get current timestamp (Beijing Time)
      id: timestamp
      run: |
        echo "BUILD_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Prepare release files list
      id: prepare_release
      run: |
        BUILD_TYPE="${{ needs.version-setup.outputs.build_type }}"
        echo "Build type: $BUILD_TYPE"
        
        # 初始化文件列表
        RELEASE_FILES=""
        
        # 根据构建类型添加对应的文件
        case $BUILD_TYPE in
          "all")
            RELEASE_FILES="artifacts/EZ-Clean-basic-arm.zip\nartifacts/EZ-Clean-basic-arm64.zip\nartifacts/EZ-Clean-multi-arm.zip\nartifacts/EZ-Clean-multi-arm64.zip"
            EXPECTED_COUNT=4
            ;;
          "basic")
            RELEASE_FILES="artifacts/EZ-Clean-basic-arm.zip\nartifacts/EZ-Clean-basic-arm64.zip"
            EXPECTED_COUNT=2
            ;;
          "multi")
            RELEASE_FILES="artifacts/EZ-Clean-multi-arm.zip\nartifacts/EZ-Clean-multi-arm64.zip"
            EXPECTED_COUNT=2
            ;;
        esac
        
        # 添加changelog.md
        RELEASE_FILES+="\nartifacts/changelog.md"
        
        # 验证文件存在
        echo "🔍 Verifying release files for build type: $BUILD_TYPE"
        FILE_COUNT=0
        for file in $(echo -e "$RELEASE_FILES"); do
          if [ -f "$file" ]; then
            echo "✅ Found: $file"
            FILE_COUNT=$((FILE_COUNT + 1))
          else
            echo "❌ Missing: $file"
          fi
        done
        
        echo "Expected files: $((EXPECTED_COUNT + 1)) (modules + changelog)"
        echo "Found files: $FILE_COUNT"
        
        if [ $FILE_COUNT -eq $((EXPECTED_COUNT + 1)) ]; then
          echo "✅ All expected files found"
        else
          echo "❌ Missing some files, but will continue with available files"
        fi
        
        # 输出文件列表
        echo "release_files<<EOF" >> $GITHUB_OUTPUT
        echo -e "$RELEASE_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      if: (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch') && steps.prepare_release.outputs.release_files != ''
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }} (${{ steps.version.outputs.BUILD_TYPE }}) - API 28+
        files: |
          ${{ steps.prepare_release.outputs.release_files }}
        body: |
          ${{ needs.prepare-changelog.outputs.changelog_content }}
          
          ## 🛠 构建信息
          - **构建类型**: ${{ steps.version.outputs.BUILD_TYPE }}
          - **NDK 版本**: R28 (${{ env.ANDROID_NDK_VERSION }})
          - **最低 Android 版本**: 9.0 (API 28)
          - **Go 版本**: ${{ env.GO_VERSION }}
          - **架构支持**: ARM, ARM64
          - **包含模块**: ${{ steps.version.outputs.BUILD_TYPE == 'all' && 'Basic + Multi' || steps.version.outputs.BUILD_TYPE }}

    - name: Cleanup old workflows
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 1

    - name: Cleanup old artifacts
      uses: c-hive/gha-remove-artifacts@v1.4.0
      with:
        age: '3 days'